{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","Menu.jsx","resetColors.js","grids/loadRGrid.js","About.js","algorithms/initialAlg.js","visualizeAlgorithm.js","Legend.jsx","Error.jsx","algorithms/visualizeInitialAlg.js","stepForward.js","stepBackward.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","row","isFinish","isStart","actualValue","className","extraClassName","id","value","type","placeholder","onInput","event","inputValueChange","Component","PathfindingVisualizer","grid","nodes","length","currentRow","currentNode","push","setState","componentDidMount","map","rowIdx","node","nodeIdx","Menu","onClick","resetGrid","href","stepBackward","handleClick","stepForward","for","min","max","gridHeight","onChange","setGridHeight","target","gridWidth","setGridWidth","setGrid","tempGrid","setTempGrid","loadRGrid","document","getElementById","resetColors","height","width","i","style","background","innerHTML","Math","floor","random","About","chooseAbout","bind","alg","selectedAlg","initialAlg","heightMap","moves","minHeight","h","w","numZeros","waterLevel","currMoves","total","solvable","traversed","j","borderCoords","currStep","mini","minj","nextTile","checkNeighbor","bordi","bordj","includes","indexToRemove","indexOf","splice","trapRainWater","visualizeAlgorithm","console","log","mode","setTimeout","temp","visualizeInitialAlg","Legend","Error","message","setCurrIndex","getMode","setMode","currIndex","tempMoves","helper","slice","restMoves","move","prevMove","App","changeNodeVal","newGrid","JSON","parse","numVal","Number","x","stringify","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c1f1d099.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { col, row, isFinish, isStart, actualValue, className } = this.props;\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : \"\";\r\n    return (\r\n      <input\r\n        id = {`node-${row}-${col}`}\r\n        value = {actualValue}\r\n        type=\"number\"\r\n        className={`node ${extraClassName} ${className}`}\r\n        placeholder={actualValue}\r\n        onInput={(event) => this.props.inputValueChange(row,col,event)}\r\n      ></input>\r\n    )\r\n  }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n  row: 0,\r\n  col: 0,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [[]],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < this.props.grid.length; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < this.props.grid[0].length; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          isStart: false,\r\n          isFinish: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.setState({\r\n      grid: nodes\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n\r\n    if(this.props.grid.length !== this.state.grid.length || this.props.grid[0].length !== this.state.grid[0].length){\r\n      this.componentDidMount()\r\n      return <div></div> //render will get called again after componentDidMount, so we just return something here in the mean time\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className = 'grid'>\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { col, row, isStart, isFinish} = node;\r\n                  return (\r\n                    <Node \r\n                      key = {nodeIdx}\r\n                      col = {col}\r\n                      row = {row}\r\n                      isStart = {isStart}\r\n                      isFinish={isFinish}\r\n                      actualValue={this.props.grid[row][col]}\r\n                      inputValueChange={this.props.inputValueChange}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>);\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport \"./Menu.sass\"\r\n\r\nexport default function Menu(props) {\r\n  return (\r\n    <nav className=\"menu\">\r\n      <ol>\r\n        <li className=\"menu-item\" onClick={props.resetGrid}>\r\n          <a href=\"#0\">Reset Grid</a>\r\n        </li>\r\n        <button className=\"playPause\" onClick={props.stepBackward}>Step Back</button>\r\n        <button\r\n          id=\"playPause\"\r\n          onClick={props.handleClick}\r\n          href=\"#\"\r\n          className=\"playPause\"\r\n        >\r\n          Play\r\n        </button>\r\n        <button className=\"playPause\" onClick = {props.stepForward}>Step Forward</button>\r\n        <li className=\"menu-item\">\r\n          <a href=\"#0\">Load Grid</a>\r\n          <ol className=\"sub-menu\">\r\n            <li className=\"menu-item\">\r\n              <a href=\"#0\">Make Grid from Dimensions</a>\r\n              <form>\r\n                <label for=\"heightInput\"><a href=\"#0\">Enter Height:</a></label>\r\n                <br></br>\r\n                <input\r\n                  id=\"heightInput\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"50\"\r\n                  value={props.gridHeight}\r\n                  onChange={(event) => props.setGridHeight(event.target.value)}\r\n                ></input>\r\n                <br></br>\r\n                <label for=\"widthInput\" type=\"number\">\r\n                  <a href=\"#0\">Enter Width:</a>\r\n                </label>\r\n                <br></br>\r\n                <input\r\n                  id=\"widthInput\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"50\"\r\n                  value={props.gridWidth}\r\n                  onInput={(event) => props.setGridWidth(event.target.value)}\r\n                ></input>\r\n                <br></br>\r\n                <input\r\n                  type=\"submit\"\r\n                  onClick={() => props.setGrid(\"dimensionInput\")}\r\n                ></input>\r\n              </form>\r\n              <br></br>\r\n            </li>\r\n            <li className=\"menu-item\">\r\n              <form>\r\n                <label for=\"arrayInput\"><a href=\"#0\">Enter as 2D Array:</a></label>\r\n                <input\r\n                  id=\"arrayInput\"\r\n                  value={props.tempGrid}\r\n                  onInput={(event) => props.setTempGrid(event.target.value)}\r\n                ></input>\r\n                <input\r\n                  type=\"submit\"\r\n                  onClick={() => props.setGrid(\"arrayInput\")}\r\n                ></input>\r\n              </form>\r\n            </li>\r\n            <li className=\"menu-item\" onClick={props.loadRGrid}>\r\n              <a href=\"#0\">Load Random Grid</a>\r\n            </li>\r\n          </ol>\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  )\r\n}\r\n","function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nexport default function resetColors(height, width) {\r\n  //reset node colors in grid\r\n  for (let row = 0; row < height; row++) {\r\n    for (let col = 0; col < width; col++) {\r\n      Node(row, col).className = \"node\"\r\n    }\r\n  }\r\n\r\n  //reset colors of steps\r\n  for (let i = 1; i < 5; i++) {\r\n    document.getElementById(`step${i}`).style.background = \"rgba(255, 0, 43, 0)\"\r\n  }\r\n  document.getElementById(\"end\").style.background = \"rgba(255, 0, 43, 0)\"\r\n\r\n  document.getElementById(\r\n    \"Error\"\r\n  ).innerHTML = `Total Water: 0 \\n Water Level: 0`\r\n}\r\n","import resetColors from \"../resetColors\"\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nexport default function loadRGrid(grid) {\r\n  //reset colors of grid\r\n  resetColors(grid.length, grid[0].length)\r\n\r\n  let nodes = grid\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      nodes[row][col] = getRandomInt(10)\r\n    }\r\n  }\r\n\r\n  return grid\r\n}\r\n","import React, { Component } from \"react\"\r\nimport \"./About.css\"\r\n\r\nexport default class About extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    this.chooseAbout = this.chooseAbout.bind(this)\r\n  }\r\n\r\n  chooseAbout(alg) {\r\n    switch (alg) {\r\n      case 1:\r\n        return (\r\n          <div>\r\n            The full steps and explanation of this algorithm are in my github.\r\n            <br></br>\r\n            <br></br>\r\n            <div id=\"step1\">\r\n              Step 1: Initialize Water Level, Total Water, and Border.\r\n            </div>\r\n            <br></br>\r\n            While(there are still inner tiles to be traversed)\r\n            <br></br>\r\n            <p id=\"step2\" className=\"loopItem\">\r\n              Step 2: Find lowest Border tile.\r\n            </p>\r\n            <br></br>\r\n            <div id=\"step3\" className=\"loopItem\">\r\n              Step 3: Choose Inner Tile adjacent to lowest Border tile. Update\r\n              Total Water and Water Level. Make the Inner tile a Border tile.\r\n            </div>\r\n            <br></br>\r\n            <div id=\"step4\" className=\"loopItem\">\r\n              Step 4: Remove Border tiles that aren't adjacent to any Inner\r\n              tiles.\r\n            </div>\r\n            <br></br>\r\n            <div id=\"end\">End</div>\r\n          </div>\r\n        )\r\n\r\n      default:\r\n        return \"Choose an algorithm!\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span className=\"About\">{this.chooseAbout(this.props.selectedAlg)}</span>\r\n    )\r\n  }\r\n}\r\n","/**\r\n * @param {number[][]} heightMap\r\n * @return {number}\r\n */\r\nvar trapRainWater = function (heightMap, moves) {\r\n  let h = heightMap.length\r\n  let w = heightMap[0].length\r\n  let numZeros = (w - 2) * (h - 2) //number of tiles left to be traversed\r\n  let waterLevel = 0 //current water level within borders\r\n  let minHeight //minimum height of border tiles\r\n  let currMoves = []\r\n  let total = 0 //total is the amount of water that can be held\r\n\r\n  //check for too small of a matrix\r\n  if (h < 3 || w < 3) {\r\n    return { moves: [], solvable: false }\r\n  }\r\n\r\n  let traversed = [] //record of tiles that have been traversed\r\n  for (var i = 0; i < h; i++) {\r\n    traversed[i] = []\r\n    for (var j = 0; j < w; j++) {\r\n      traversed[i][j] = 0\r\n    }\r\n  }\r\n\r\n  //add outer tiles of heightMap as border\r\n  let borderCoords = [] //coordinates of border tiles. index is row, value is column.\r\n  for (let i = 0; i < h; i++) {\r\n    borderCoords[i] = []\r\n  }\r\n\r\n  //traverse all border tiles and corners\r\n  //top and bottom\r\n  for (let i = 1; i < w - 1; i++) {\r\n    borderCoords[0].push(i)\r\n    borderCoords[h - 1].push(i)\r\n    traversed[0][i] = 1\r\n    traversed[h - 1][i] = 1\r\n    //add these to moves\r\n    currMoves.push([[0], [i]], [[h - 1], [i]])\r\n  }\r\n  //right and left sides\r\n  for (let j = 1; j < h - 1; j++) {\r\n    borderCoords[j].push(0)\r\n    borderCoords[j].push(w - 1)\r\n    traversed[j][0] = 1\r\n    traversed[j][w - 1] = 1\r\n    currMoves.push([[j], [0]], [[j], [w - 1]])\r\n  }\r\n  //add initial border to moves\r\n  moves.push({\r\n    currStep: 0,\r\n    currMoves: currMoves,\r\n    total: total,\r\n    waterLevel: waterLevel,\r\n  })\r\n  currMoves = []\r\n\r\n  //corners\r\n  traversed[0][0] = 1\r\n  traversed[0][w - 1] = 1\r\n  traversed[h - 1][0] = 1\r\n  traversed[h - 1][w - 1] = 1\r\n  currMoves.push([[0], [0]], [[0], [w - 1]], [[h - 1], [0]], [[h - 1], [w - 1]])\r\n  moves.push({\r\n    currStep: 0,\r\n    currMoves: currMoves,\r\n    total: total,\r\n    waterLevel: waterLevel,\r\n  })\r\n  currMoves = []\r\n\r\n  //main loop\r\n  while (numZeros !== 0) {\r\n    //if new minHeight is more than old, add (newMinHeight - OldMinHeight)*numZerosY\r\n    for (let i = 0; i < borderCoords.length; i++) {\r\n      if (borderCoords[i].length > 0) {\r\n        minHeight = heightMap[i][borderCoords[i][0]]\r\n        break\r\n      }\r\n    }\r\n    for (let i = 0; i < borderCoords.length; i++) {\r\n      for (let j = 0; j < borderCoords[i].length; j++) {\r\n        if (heightMap[i][borderCoords[i][j]] < minHeight) {\r\n          minHeight = heightMap[i][borderCoords[i][j]]\r\n        }\r\n      }\r\n    }\r\n\r\n    if (minHeight > waterLevel) {\r\n      total += (minHeight - waterLevel) * numZeros\r\n      waterLevel = minHeight\r\n    }\r\n\r\n    //find lowest border tile\r\n    let mini, minj\r\n    for (let i = 0; i < h; i++) {\r\n      for (let j = 0; j < borderCoords[i].length; j++) {\r\n        if (heightMap[i][borderCoords[i][j]] === minHeight) {\r\n          mini = i\r\n          minj = borderCoords[i][j]\r\n          break\r\n        }\r\n      }\r\n    }\r\n    //add lowest border node to moves\r\n    currMoves.push([mini, minj])\r\n    moves.push({\r\n      currStep: 1,\r\n      currMoves: currMoves,\r\n      total: total,\r\n      waterLevel: waterLevel,\r\n    })\r\n    currMoves = []\r\n\r\n    //get 0 tile next to lowest border tile\r\n    let nextTile = checkNeighbor(mini, minj, 0)\r\n\r\n    //We have our new tile at lowestCoords\r\n    //update traversed\r\n    traversed[nextTile[0]][nextTile[1]] = 1\r\n    //update numZeros\r\n    numZeros -= 1\r\n    //remove rock of nextTile from total\r\n    if (heightMap[nextTile[0]][nextTile[1]] <= waterLevel) {\r\n      total -= heightMap[nextTile[0]][nextTile[1]]\r\n    } else {\r\n      total -= waterLevel\r\n    }\r\n    //add nextTile to border\r\n    borderCoords[nextTile[0]].push(nextTile[1])\r\n    currMoves.push([nextTile[0], nextTile[1]])\r\n    moves.push({\r\n      currStep: 2,\r\n      currMoves: currMoves,\r\n      total: total,\r\n      waterLevel: waterLevel,\r\n    })\r\n    currMoves = []\r\n\r\n    //check neighbors of new border tile, if they're no longer next to a 0 tile, then remove them. also check nextTile\r\n    //above\r\n    let bordi = nextTile[0] - 1\r\n    let bordj = nextTile[1]\r\n    if (borderCoords[bordi].includes(bordj)) {\r\n      if (checkNeighbor(bordi, bordj, 0).length === 0) {\r\n        let indexToRemove = borderCoords[bordi].indexOf(bordj)\r\n        borderCoords[bordi].splice(indexToRemove, 1)\r\n        currMoves.push([bordi, bordj])\r\n      }\r\n    }\r\n    //below\r\n    bordi = nextTile[0] + 1\r\n    bordj = nextTile[1]\r\n    if (borderCoords[bordi].includes(bordj)) {\r\n      if (checkNeighbor(bordi, bordj, 0).length === 0) {\r\n        let indexToRemove = borderCoords[bordi].indexOf(bordj)\r\n        borderCoords[bordi].splice(indexToRemove, 1)\r\n        currMoves.push([bordi, bordj])\r\n      }\r\n    }\r\n    //left\r\n    bordi = nextTile[0]\r\n    bordj = nextTile[1] - 1\r\n    if (borderCoords[bordi].includes(bordj)) {\r\n      if (checkNeighbor(bordi, bordj, 0).length === 0) {\r\n        let indexToRemove = borderCoords[bordi].indexOf(bordj)\r\n        borderCoords[bordi].splice(indexToRemove, 1)\r\n        currMoves.push([bordi, bordj])\r\n      }\r\n    }\r\n    //right\r\n    bordi = nextTile[0]\r\n    bordj = nextTile[1] + 1\r\n    if (borderCoords[bordi].includes(bordj)) {\r\n      if (checkNeighbor(bordi, bordj, 0).length === 0) {\r\n        let indexToRemove = borderCoords[bordi].indexOf(bordj)\r\n        borderCoords[bordi].splice(indexToRemove, 1)\r\n        currMoves.push([bordi, bordj])\r\n      }\r\n    }\r\n    //nextTile\r\n    bordi = nextTile[0]\r\n    bordj = nextTile[1]\r\n    if (borderCoords[bordi].includes(bordj)) {\r\n      if (checkNeighbor(bordi, bordj, 0).length === 0) {\r\n        let indexToRemove = borderCoords[bordi].indexOf(bordj)\r\n        borderCoords[bordi].splice(indexToRemove, 1)\r\n        currMoves.push([bordi, bordj])\r\n      }\r\n    }\r\n    //update moves with border tiles to remove\r\n    moves.push({\r\n      currStep: 3,\r\n      currMoves: currMoves,\r\n      total: total,\r\n      waterLevel: waterLevel,\r\n    })\r\n    currMoves = []\r\n  }\r\n\r\n  return { moves: moves, solvable: true }\r\n\r\n  //checks neighbors of a tile for a certain value of traversed, returns the first neighbor's coordinates to satisfy\r\n  function checkNeighbor(i, j, value) {\r\n    //above\r\n    try {\r\n      if (traversed[i - 1][j] === value) {\r\n        return [i - 1, j]\r\n      }\r\n    } catch {\r\n      //neighbor doesn't exist so do nothing. This happens at the edges of heightMap and traversed.\r\n    }\r\n    //below\r\n    try {\r\n      if (traversed[i + 1][j] === value) {\r\n        return [i + 1, j]\r\n      }\r\n    } catch {\r\n      //neighbor doesn't exist so do nothing\r\n    }\r\n    //left\r\n    try {\r\n      if (traversed[i][j - 1] === value) {\r\n        return [i, j - 1]\r\n      }\r\n    } catch {\r\n      //neighbor doesn't exist so do nothing\r\n    }\r\n\r\n    //right\r\n    try {\r\n      if (traversed[i][j + 1] === value) {\r\n        return [i, j + 1]\r\n      }\r\n    } catch {\r\n      //neighbor doesn't exist so do nothing\r\n    }\r\n\r\n    return []\r\n  }\r\n}\r\n\r\nexport default function initialAlg(heightMap) {\r\n  let { moves, solvable } = trapRainWater(heightMap, [])\r\n\r\n  return { moves: moves, solvable: solvable }\r\n}\r\n","import initialAlg from \"./algorithms/initialAlg\"\r\n\r\n//This function is bound to App.js so that App may\r\n//call any algorithm and visualize it\r\n\r\nexport default function visualizeAlgorithm() {\r\n  switch (this.state.selectedAlg) {\r\n    case 0:\r\n      console.log(\"No algorithm selected!\")\r\n      break\r\n\r\n    case 1:\r\n      if (this.state.mode === \"play\") {\r\n        //currently in play mode, let's pause it. This will end the current instance of visualize InitialAlg\r\n        this.setState({ mode: \"pause\" })\r\n        document.getElementById(\"playPause\").innerHTML = \"Play\"\r\n        break\r\n      }\r\n      //mode === \"pause\" so we initiate the play mode\r\n      document.getElementById(\"playPause\").innerHTML = \"Pause\"\r\n      this.setState({ mode: \"play\" })\r\n      setTimeout(() => {\r\n        let temp = initialAlg(this.state.grid)\r\n        this.visualizeInitialAlg(temp.moves, temp.solvable)\r\n        this.setState({ moves: temp.moves })\r\n      }, 1)\r\n      break\r\n\r\n    default:\r\n      console.log(\"You selected an algorithm!\")\r\n      break\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport Node from \"./PathfindingVisualizer/Node/Node.jsx\"\r\nimport \"./Legend.css\"\r\n\r\nexport default function Legend(props) {\r\n  switch (props.selectedAlg) {\r\n    case 1:\r\n      return (\r\n        <div className=\"Legend\">\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={false}></Node> = Inner Tile\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={true}></Node> = Border Tile\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={true} isFinish={false}></Node> = Lowest Border Tile\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node className=\"node-visited\"></Node> = Traversed Tile\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    default:\r\n      return <div></div>\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport \"./Error.css\"\r\nimport Legend from \"./Legend.jsx\"\r\n\r\nexport default function Error(props) {\r\n  let message = \"\"\r\n  switch (props.selectedAlg) {\r\n    case 1:\r\n      message = `Total Water: 0 \\n\r\n                Water Level: 0`\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return (\r\n    <div className={\"ErrorLegend\"}>\r\n      <div className=\"Error\" id=\"Error\">\r\n        {message}\r\n      </div>\r\n      <Legend selectedAlg={props.selectedAlg}></Legend>\r\n    </div>\r\n  )\r\n}\r\n","function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\n//this function is bound to App\r\n//so that it can call the functions in App\r\n\r\nexport default function visualizeInitialAlg(moves, solvable) {\r\n  //copy funtions from app so they can be called within helper\r\n  let setCurrIndex = this.setCurrIndex\r\n  let getMode = this.getMode\r\n  let setMode = this.setMode\r\n\r\n  //Check if matrix is too small\r\n  if (!solvable) {\r\n    console.log(\"matrix too small\")\r\n    document.getElementById(\"Error\").innerHTML =\r\n      \"Matrix has no inner tiles. Total Water = 0.\"\r\n    return\r\n  }\r\n\r\n  let currIndex = this.state.currIndex //how far we are along moves\r\n  // console.log(\"In visualizeInitialAlg\", currIndex)\r\n\r\n  //reset className of <div id=\"end\"><div> if it's still highlighted fromprevious run\r\n  document.getElementById(\"end\").className = \"\"\r\n\r\n  if (currIndex < 1) {\r\n    //make initial border\r\n    let tempMoves = moves[0].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-finish\"\r\n    }\r\n    //color corners\r\n    tempMoves = moves[1].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-visited\"\r\n    }\r\n\r\n    //set About color\r\n    document.getElementById(\"step1\").style.background = \"rgba(255, 0, 43, 0.3)\"\r\n\r\n    //we finished step 0, so currIndex = 2 now\r\n    currIndex = 2\r\n\r\n    setTimeout(() => {\r\n      helper(moves.slice(currIndex)) //currIndex is 2\r\n      return\r\n    }, 1000)\r\n  } else {\r\n    helper(moves.slice(currIndex))\r\n    return\r\n  }\r\n\r\n  //show rest of moves\r\n  function helper(restMoves) {\r\n    //check if the pause button has been pressed\r\n    if (getMode() === \"pause\") {\r\n      //update currIndex\r\n      setCurrIndex(currIndex)\r\n      return\r\n    }\r\n\r\n    if (restMoves.length < 1) {\r\n      document.getElementById(\"end\").style.background = \"rgba(255, 0, 43, 0.3)\"\r\n      document.getElementById(\"step4\").style.background = \"rgba(255, 0, 43, 0)\"\r\n      //update currIndex\r\n      setCurrIndex(currIndex)\r\n      setMode(\"pause\")\r\n      document.getElementById(\"playPause\").innerHTML = \"Play\"\r\n      return currIndex\r\n    }\r\n\r\n    //set About color for current step\r\n    document.getElementById(\r\n      `step${restMoves[0].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0.3)\"\r\n    //reset About color from previous step\r\n    document.getElementById(\r\n      `step${moves[currIndex - 1].currStep + 1}`\r\n    ).style.background = \"rgba(0, 0, 0, 0)\" //set background opacity of last item to 0 to remove highlighting.\r\n\r\n    //update total and waterLevel on screen\r\n    document.getElementById(\r\n      \"Error\"\r\n    ).innerHTML = `Total Water: ${restMoves[0].total} \\n Water Level: ${restMoves[0].waterLevel}`\r\n\r\n    let move\r\n    let prevMove\r\n    if (restMoves[0].currStep === 1) {\r\n      //highlight lowest border node\r\n      move = restMoves[0].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-start\"\r\n    } else if (restMoves[0].currStep === 2) {\r\n      //add new border node\r\n      move = restMoves[0].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-finish\"\r\n    } else if (restMoves[0].currStep === 3) {\r\n      //remove highlighting of lowest border node from step 1\r\n      prevMove = moves[currIndex - 2].currMoves[0]\r\n      Node(prevMove[0], prevMove[1]).className = \"node-finish\"\r\n\r\n      for (let i = 0; i < restMoves[0].currMoves.length; i++) {\r\n        //remove border node\r\n        move = restMoves[0].currMoves[i]\r\n        Node(move[0], move[1]).className = \"node-visited\"\r\n      }\r\n    }\r\n\r\n    //we finished another step so increment currIndex\r\n    currIndex += 1\r\n\r\n    //recursive call\r\n    setTimeout(() => {\r\n      helper(restMoves.slice(1))\r\n    }, 300)\r\n  }\r\n}\r\n","import initialAlg from \"./algorithms/initialAlg\"\r\n\r\nfunction Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\n//this function is bound to App\r\n//so that it can call the functions in App\r\n\r\nexport default function stepForward() {\r\n  let moves, solvable\r\n  //check if moves has already been calculated\r\n  if (this.state.moves.length < 1) {\r\n    let temp = initialAlg(this.state.grid)\r\n    this.setState({ moves: temp.moves })\r\n    moves = temp.moves\r\n    solvable = temp.solvable\r\n  } else {\r\n    moves = this.state.moves\r\n    if (this.state.grid.length < 3 || this.state.grid[0] < 3) {\r\n      solvable = false\r\n    } else {\r\n      solvable = true\r\n    }\r\n  }\r\n\r\n  //copy funtions from app so they can be called within helper\r\n  let setCurrIndex = this.setCurrIndex\r\n\r\n  //Check if matrix is too small\r\n  if (!solvable) {\r\n    console.log(\"matrix too small\")\r\n    document.getElementById(\"Error\").innerHTML =\r\n      \"Matrix has no inner tiles. Total Water = 0.\"\r\n    return\r\n  }\r\n\r\n  let currIndex = this.state.currIndex //how far we are along moves\r\n  //   console.log(\"In visualizeInitialAlg\", currIndex)\r\n\r\n  //reset className of <div id=\"end\"><div> if it's still highlighted fromprevious run\r\n  document.getElementById(\"end\").className = \"\"\r\n\r\n  if (currIndex < 1) {\r\n    //make initial border\r\n    let tempMoves = moves[0].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-finish\"\r\n    }\r\n    //color corners\r\n    tempMoves = moves[1].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-visited\"\r\n    }\r\n\r\n    //set About color\r\n    document.getElementById(\"step1\").style.background = \"rgba(255, 0, 43, 0.3)\"\r\n\r\n    //we finished step 0, so currIndex = 2 now\r\n    currIndex = 2\r\n    setCurrIndex(2)\r\n  } else {\r\n    helper(moves.slice(currIndex))\r\n    return\r\n  }\r\n\r\n  //show rest of moves\r\n  function helper(restMoves) {\r\n    if (restMoves.length < 1) {\r\n      document.getElementById(\"step4\").style.background = \"rgba(255, 0, 43, 0)\"\r\n      document.getElementById(\"end\").style.background = \"rgba(255, 0, 43, 0.3)\"\r\n      return currIndex\r\n    }\r\n\r\n    //set About color for current step\r\n    document.getElementById(\r\n      `step${restMoves[0].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0.3)\"\r\n    //reset About color from previous step\r\n    document.getElementById(\r\n      `step${moves[currIndex - 1].currStep + 1}`\r\n    ).style.background = \"rgba(0, 0, 0, 0)\" //set background opacity of last item to 0 to remove highlighting.\r\n\r\n    //update total and waterLevel on screen\r\n    document.getElementById(\r\n      \"Error\"\r\n    ).innerHTML = `Total Water: ${restMoves[0].total} \\n Water Level: ${restMoves[0].waterLevel}`\r\n\r\n    let move\r\n    let prevMove\r\n    if (restMoves[0].currStep === 1) {\r\n      //highlight lowest border node\r\n      move = restMoves[0].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-start\"\r\n    } else if (restMoves[0].currStep === 2) {\r\n      //add new border node\r\n      move = restMoves[0].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-finish\"\r\n    } else if (restMoves[0].currStep === 3) {\r\n      //remove highlighting of lowest border node from step 1\r\n      prevMove = moves[currIndex - 2].currMoves[0]\r\n      Node(prevMove[0], prevMove[1]).className = \"node-finish\"\r\n\r\n      for (let i = 0; i < restMoves[0].currMoves.length; i++) {\r\n        //remove border node\r\n        move = restMoves[0].currMoves[i]\r\n        Node(move[0], move[1]).className = \"node-visited\"\r\n      }\r\n    }\r\n\r\n    //we finished another step so increment currIndex\r\n    currIndex += 1\r\n    setCurrIndex(currIndex)\r\n  }\r\n}\r\n\r\n//FIXME doesn't highlight \"end\" step in about\r\n","function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\n//this function is bound to App\r\n//so that it can call the functions in App\r\n\r\nexport default function stepBackward() {\r\n  //copy funtions from app so they can be called within helper\r\n  let setCurrIndex = this.setCurrIndex\r\n  let currIndex = this.state.currIndex\r\n  let moves = this.state.moves\r\n\r\n  if (currIndex < 2) {\r\n    //no previous move so return\r\n    //no need to set moves or solvable since play or stepForward will do that in the first step\r\n    // console.log(\"no previous move\")\r\n    return\r\n  } else if (currIndex === 2) {\r\n    //Only first step is done so undo first step\r\n    //make initial border\r\n    let tempMoves = moves[0].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\"\r\n    }\r\n    //color corners\r\n    tempMoves = moves[1].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\"\r\n    }\r\n\r\n    //set About color\r\n    document.getElementById(\"step1\").style.background = \"rgba(255, 0, 43, 0)\"\r\n\r\n    //we finished step 0, so currIndex = 2 now\r\n    currIndex = 0\r\n    this.setState({ currIndex: currIndex })\r\n  } else if (\r\n    currIndex === moves.length &&\r\n    document.getElementById(\"end\").style.background === \"rgba(255, 0, 43, 0.3)\"\r\n  ) {\r\n    //we're at the end step. Note that the end step and the step before have the same currIndex,\r\n    //which is why we don't update currIndex in this step\r\n\r\n    //remove color of end step\r\n    document.getElementById(\"end\").style.background = \"rgba(255, 0, 43, 0)\"\r\n\r\n    //set color of step 4\r\n    document.getElementById(\"step4\").style.background = \"rgba(255, 0, 43, 0.3)\"\r\n  } else {\r\n    //no more special cases\r\n\r\n    //set color of steps\r\n    document.getElementById(\r\n      `step${moves[currIndex - 2].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0.3)\"\r\n    //reset About color from previous step\r\n    document.getElementById(\r\n      `step${moves[currIndex - 1].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0)\" //set background opacity of last item to 0 to remove highlighting.\r\n\r\n    //update total and waterLevel on screen\r\n    document.getElementById(\"Error\").innerHTML = `Total Water: ${\r\n      moves[currIndex - 2].total\r\n    } \\n Water Level: ${moves[currIndex - 2].waterLevel}`\r\n\r\n    //check the currStep\r\n    let move, prevMove\r\n    if (moves[currIndex - 1].currStep === 1) {\r\n      //highlight lowest border node\r\n      move = moves[currIndex - 1].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-finish\"\r\n    } else if (moves[currIndex - 1].currStep === 2) {\r\n      //add new border node\r\n      move = moves[currIndex - 1].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node\"\r\n    } else if (moves[currIndex - 1].currStep === 3) {\r\n      //add removed border nodes\r\n      for (let i = 0; i < moves[currIndex - 1].currMoves.length; i++) {\r\n        //remove border node\r\n        move = moves[currIndex - 1].currMoves[i]\r\n        Node(move[0], move[1]).className = \"node-finish\"\r\n      }\r\n\r\n      //add highlighting of lowest border node\r\n      prevMove = moves[currIndex - 3].currMoves[0]\r\n      Node(prevMove[0], prevMove[1]).className = \"node-start\"\r\n    }\r\n\r\n    currIndex -= 1\r\n    setCurrIndex(currIndex)\r\n  }\r\n}\r\n","import React from \"react\"\nimport \"./App.css\"\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\"\nimport Menu from \"./Menu\"\nimport loadRGrid from \"./grids/loadRGrid.js\"\nimport About from \"./About\"\nimport visualizeAlgorithm from \"./visualizeAlgorithm\"\nimport Error from \"./Error\"\nimport visualizeInitialAlg from \"./algorithms/visualizeInitialAlg\"\nimport stepForward from \"./stepForward.js\"\nimport stepBackward from \"./stepBackward.js\"\nimport resetColors from \"./resetColors.js\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: [],\n      tempGrid: \"\",\n      gridHeight: 9,\n      gridWidth: 9,\n      selectedAlg: 1,\n      mode: \"pause\", //mode of playPause button\n      currIndex: 0, //how far we are though the moves array in visualizeInitialAlg\n      moves: [], //the set of moves from initialAlg\n    }\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this)\n    this.inputValueChange = this.inputValueChange.bind(this)\n    this.changeNodeVal = this.changeNodeVal.bind(this)\n    this.setGridHeight = this.setGridHeight.bind(this)\n    this.setGridWidth = this.setGridWidth.bind(this)\n    this.setGrid = this.setGrid.bind(this)\n    this.getMode = this.getMode.bind(this)\n    this.visualizeInitialAlg = visualizeInitialAlg.bind(this)\n    this.setCurrIndex = this.setCurrIndex.bind(this)\n    this.stepForward = stepForward.bind(this)\n    this.stepBackward = stepBackward.bind(this)\n    this.setMode = this.setMode.bind(this)\n    this.resetGrid = this.resetGrid.bind(this)\n  }\n\n  // stepForward() {\n  //   //turn mode to play, then turn it back after 1 millisecond so that visualizeAlgorithm goes through 1 iteration.\n  //   this.setState({ mode: \"play\" })\n  //   this.visualizeAlgorithm()\n  //   document.getElementById(\"playPause\").innerHTML = \"Play\" //This overrides visualizeAlgorithm turning the playPause button to \"Pause\"\n  //   setTimeout(() => {\n  //     this.setState({ mode: \"pause\" })\n  //   }, 1)\n  // }\n\n  resetGrid() {\n    resetColors(this.state.grid.length, this.state.grid[0].length)\n    this.setState({ mode: \"pause\" })\n    //It'll take a hot second to pause visualizeInitialAlg because of the setTimeout in the recursive call, so we need to wait before we update currIndex\n    setTimeout(() => {\n      this.setState({ currIndex: 0 })\n    }, 301)\n    document.getElementById(\"playPause\").innerHTML = \"Play\"\n  }\n\n  setCurrIndex(value) {\n    this.setState({ currIndex: value })\n  }\n\n  setMode(value) {\n    this.setState({ mode: value })\n  }\n\n  getMode() {\n    return this.state.mode\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice()\n    newGrid[row][col] = value\n    this.setState({\n      grid: newGrid,\n    })\n  }\n\n  setGridHeight(event) {\n    this.setState({\n      gridHeight: event.target.value,\n    })\n    // console.log(\"gridHeight\", this.state.gridHeight)\n  }\n\n  setGridWidth(event) {\n    this.setState({\n      gridWidth: event.target.value,\n    })\n    // console.log(\"gridWidth\", this.state.gridWidth)\n  }\n\n  setGrid(type) {\n    let nodes = []\n\n    //setGrid being called from entering dimensions\n    if (type === \"dimensionInput\") {\n      for (let i = 0; i < this.state.gridHeight; i++) {\n        let row = []\n        for (let j = 0; j < this.state.gridWidth; j++) {\n          row.push(0)\n        }\n        nodes.push(row)\n      }\n      this.setState({\n        grid: nodes,\n        moves: [],\n        currIndex: 0,\n      })\n    } else {\n      //setGrid being called from entering array\n      this.setState({\n        grid: JSON.parse(this.state.tempGrid),\n        moves: [],\n        currIndex: 0,\n      })\n    }\n\n    //reset colors on all the nodes\n    resetColors(this.state.grid.length, this.state.grid[0].length)\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value\n    let numVal = Number(value)\n\n    if (numVal >= 0 && numVal <= 9) {\n      let newGrid = this.state.grid.slice()\n      newGrid[row][col] = numVal\n      this.setState({\n        grid: newGrid,\n      })\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n    this.setState({\n      grid: nodes,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Header\">Algorithm Visualizer</h1>\n        <Menu\n          gridHeight={this.state.gridHeight}\n          gridWidth={this.state.gridWidth}\n          tempGrid={this.state.tempGrid}\n          handleClick={() => this.visualizeAlgorithm(this.changeNodeVal)}\n          stepForward={this.stepForward}\n          stepBackward={this.stepBackward}\n          setGridHeight={(x) => this.setState({ gridHeight: x })}\n          setGridWidth={(x) => this.setState({ gridWidth: x })}\n          setTempGrid={(x) => this.setState({ tempGrid: x })}\n          setGrid={this.setGrid}\n          resetGrid={this.resetGrid}\n          loadRGrid={() => {\n            this.setState(\n              { grid: loadRGrid(this.state.grid), moves: [], currIndex: 0 },\n              this.setState({ tempGrid: JSON.stringify(this.state.grid) })\n            )\n          }}\n        ></Menu>\n        <div className=\"flexbox\">\n          <About selectedAlg={this.state.selectedAlg}></About>\n          <PathfindingVisualizer\n            inputValueChange={this.inputValueChange}\n            grid={this.state.grid}\n          ></PathfindingVisualizer>\n          <Error selectedAlg={this.state.selectedAlg}></Error>\n        </div>\n        <h3>p.s. I love you :heart:</h3>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}