{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction getImmutableSquares(mutable) {\n  let count = 0;\n  let immutableSquares = [];\n  let squareRow = 0;\n  let squareCol = 0;\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (!mutable[row][col]) {\n          count++;\n        }\n      }\n    }\n\n    if (count >= 8) {\n      immutableSquares.push([squareRow, squareCol]);\n    }\n\n    count = 0;\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n  }\n\n  return immutableSquares;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction randomGrid(grid, mutable) {\n  //copy array because pass by reference and setState are fucking dumb\n  let tempGrid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      tempGrid[row][col] = grid[row][col];\n    }\n  }\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (mutable[row][col]) {\n        tempGrid[row][col] = getRandomInt(9) + 1;\n      }\n    }\n  }\n\n  return tempGrid;\n}\n\nfunction error(grid) {\n  let E = 0;\n  let seen = [];\n  let squareRow = 0;\n  let squareCol = 0; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //Check the squares\n\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (seen.includes(grid[row][col])) {\n          E = E + 1;\n        } else {\n          seen.push(grid[row][col]);\n        }\n      }\n    }\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n\n    seen = [];\n  }\n\n  return E;\n}\n\nfunction minimum(array) {\n  let min = Infinity;\n\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n\nfunction solve(grid, moves, mutable) {\n  //check if any squares have 8 or 9 immutables\n  let immutableSquares = getImmutableSquares(mutable);\n\n  if (immutableSquares.length === 9) {\n    document.getElementById(\"Error\").innerHTML = \"Trivial solution detected.\";\n    return;\n  } //Step 1: initialize population\n\n\n  let Cpopulation = [];\n  let N = 1000; //population size\n\n  for (let i = 0; i < N; i++) {\n    //create random individual\n    Cpopulation.push(randomGrid(grid, mutable));\n  }\n\n  let Ngenerations = 1000;\n\n  for (let g = 0; g < Ngenerations; g++) {\n    //Step 2: Selection\n    //Create reproductive population\n    let fitness = [];\n    let Rpopulation = [];\n\n    for (let i = 0; i < N; i++) {\n      //evaluate error of each individual\n      //add individual to reproductive population according to its error\n      fitness.push(216 - error(Cpopulation[i])); //Maximum error is 81*3-9*3 = 216\n    } // console.log(fitness[0])\n    // //subtract constant from all fitnesses so that the minimum is 1\n\n\n    let min = minimum(fitness); // console.log(min)\n\n    for (let j = 0; j < fitness.length; j++) {\n      fitness[j] = fitness[j] - min + 1;\n    } //make reproductive population based on fitness of individuals\n\n\n    for (let i = 0; i < N; i++) {\n      for (let j = 0; j < fitness[i]; j++) {\n        Rpopulation.push(i);\n        Rpopulation.push(i);\n        Rpopulation.push(i);\n      }\n    } //Step 3: Reproduction\n    //create new population from current reproductive population\n\n\n    let Npopulation = [];\n    let parent1 = -1;\n    let parent2 = -1;\n\n    for (let i = 0; i < N; i++) {\n      //choose two random parents\n      parent1 = Rpopulation[getRandomInt(Rpopulation.length)];\n      parent2 = Rpopulation[getRandomInt(Rpopulation.length)];\n\n      while (parent2 === parent1) {\n        parent2 = Rpopulation[getRandomInt(Rpopulation.length)];\n      } // mix their info\n\n\n      let tempGrid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n\n      for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n          if (mutable[row][col]) {\n            if (Math.random() > 0.5) {\n              tempGrid[row][col] = Cpopulation[parent1][row][col];\n            } else {\n              tempGrid[row][col] = Cpopulation[parent2][row][col];\n            }\n          } else {\n            tempGrid[row][col] = grid[row][col];\n          }\n        }\n      } // mutate\n\n\n      for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n          if (mutable[row][col]) {\n            if (Math.random() < 0.01 - 0.00001 * g) {\n              tempGrid[row][col] = getRandomInt(9) + 1;\n            }\n          }\n        }\n      } //add new child to new population\n\n\n      Npopulation.push(tempGrid);\n    } //Finished making new generation. Set new population to current population and do next generation\n\n\n    moves.push(Cpopulation[0]);\n    Cpopulation = Npopulation;\n  }\n}\n\nexport default function geneticAlgorithm(grid) {\n  let mutable = []; //Prevents the algorithm from changing original node values\n\n  for (let row = 0; row < 9; row++) {\n    let temp = [];\n\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0 || grid[row][col] === \"0\") {\n        temp.push(true);\n      } else {\n        temp.push(false);\n      }\n    }\n\n    mutable.push(temp);\n  } //a list of the moves the algorithm will take\n\n\n  let moves = [];\n  solve(grid, moves, mutable);\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/geneticAlgorithm.js"],"names":["Node","row","col","document","getElementById","getImmutableSquares","mutable","count","immutableSquares","squareRow","squareCol","square","push","getRandomInt","max","Math","floor","random","randomGrid","grid","tempGrid","error","E","seen","includes","minimum","array","min","Infinity","i","length","solve","moves","innerHTML","Cpopulation","N","Ngenerations","g","fitness","Rpopulation","j","Npopulation","parent1","parent2","geneticAlgorithm","temp"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction getImmutableSquares(mutable) {\r\n  let count = 0\r\n  let immutableSquares = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (!mutable[row][col]) {\r\n          count++\r\n        }\r\n      }\r\n    }\r\n\r\n    if (count >= 8) {\r\n      immutableSquares.push([squareRow, squareCol])\r\n    }\r\n\r\n    count = 0\r\n\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n  }\r\n\r\n  return immutableSquares\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nfunction randomGrid(grid, mutable) {\r\n  //copy array because pass by reference and setState are fucking dumb\r\n  let tempGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      tempGrid[row][col] = grid[row][col]\r\n    }\r\n  }\r\n\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (mutable[row][col]) {\r\n        tempGrid[row][col] = getRandomInt(9) + 1\r\n      }\r\n    }\r\n  }\r\n  return tempGrid\r\n}\r\n\r\nfunction error(grid) {\r\n  let E = 0\r\n  let seen = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  //check the rows\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (seen.includes(grid[row][col])) {\r\n        E = E + 1\r\n      } else {\r\n        seen.push(grid[row][col])\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //check the columns\r\n  for (let col = 0; col < 9; col++) {\r\n    for (let row = 0; row < 9; row++) {\r\n      if (seen.includes(grid[row][col])) {\r\n        E = E + 1\r\n      } else {\r\n        seen.push(grid[row][col])\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //Check the squares\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (seen.includes(grid[row][col])) {\r\n          E = E + 1\r\n        } else {\r\n          seen.push(grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n\r\n    seen = []\r\n  }\r\n\r\n  return E\r\n}\r\n\r\nfunction minimum(array) {\r\n  let min = Infinity\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < min) {\r\n      min = array[i]\r\n    }\r\n  }\r\n  return min\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n  //check if any squares have 8 or 9 immutables\r\n  let immutableSquares = getImmutableSquares(mutable)\r\n  if (immutableSquares.length === 9) {\r\n    document.getElementById(\"Error\").innerHTML = \"Trivial solution detected.\"\r\n    return\r\n  }\r\n\r\n  //Step 1: initialize population\r\n  let Cpopulation = []\r\n  let N = 1000 //population size\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    //create random individual\r\n    Cpopulation.push(randomGrid(grid, mutable))\r\n  }\r\n\r\n  let Ngenerations = 1000\r\n  for (let g = 0; g < Ngenerations; g++) {\r\n    //Step 2: Selection\r\n    //Create reproductive population\r\n    let fitness = []\r\n    let Rpopulation = []\r\n    for (let i = 0; i < N; i++) {\r\n      //evaluate error of each individual\r\n      //add individual to reproductive population according to its error\r\n      fitness.push(216 - error(Cpopulation[i])) //Maximum error is 81*3-9*3 = 216\r\n    }\r\n    // console.log(fitness[0])\r\n\r\n    // //subtract constant from all fitnesses so that the minimum is 1\r\n    let min = minimum(fitness)\r\n    // console.log(min)\r\n    for (let j = 0; j < fitness.length; j++) {\r\n      fitness[j] = fitness[j] - min + 1\r\n    }\r\n\r\n    //make reproductive population based on fitness of individuals\r\n    for (let i = 0; i < N; i++) {\r\n      for (let j = 0; j < fitness[i]; j++) {\r\n        Rpopulation.push(i)\r\n        Rpopulation.push(i)\r\n        Rpopulation.push(i)\r\n      }\r\n    }\r\n\r\n    //Step 3: Reproduction\r\n    //create new population from current reproductive population\r\n    let Npopulation = []\r\n    let parent1 = -1\r\n    let parent2 = -1\r\n    for (let i = 0; i < N; i++) {\r\n      //choose two random parents\r\n      parent1 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      parent2 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      while (parent2 === parent1) {\r\n        parent2 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      }\r\n\r\n      // mix their info\r\n      let tempGrid = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      ]\r\n\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col++) {\r\n          if (mutable[row][col]) {\r\n            if (Math.random() > 0.5) {\r\n              tempGrid[row][col] = Cpopulation[parent1][row][col]\r\n            } else {\r\n              tempGrid[row][col] = Cpopulation[parent2][row][col]\r\n            }\r\n          } else {\r\n            tempGrid[row][col] = grid[row][col]\r\n          }\r\n        }\r\n      }\r\n\r\n      // mutate\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col++) {\r\n          if (mutable[row][col]) {\r\n            if (Math.random() < 0.01 - 0.00001 * g) {\r\n              tempGrid[row][col] = getRandomInt(9) + 1\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      //add new child to new population\r\n      Npopulation.push(tempGrid)\r\n    }\r\n\r\n    //Finished making new generation. Set new population to current population and do next generation\r\n    moves.push(Cpopulation[0])\r\n    Cpopulation = Npopulation\r\n  }\r\n}\r\n\r\nexport default function geneticAlgorithm(grid) {\r\n  let mutable = []\r\n\r\n  //Prevents the algorithm from changing original node values\r\n  for (let row = 0; row < 9; row++) {\r\n    let temp = []\r\n    for (let col = 0; col < 9; col++) {\r\n      if (grid[row][col] === 0 || grid[row][col] === \"0\") {\r\n        temp.push(true)\r\n      } else {\r\n        temp.push(false)\r\n      }\r\n    }\r\n    mutable.push(temp)\r\n  }\r\n\r\n  //a list of the moves the algorithm will take\r\n  let moves = []\r\n\r\n  solve(grid, moves, mutable)\r\n\r\n  return moves\r\n}\r\n"]},"metadata":{},"sourceType":"module"}