{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\n_c = Node;\nexport default function visualizeBacktracking(moves, solvable) {\n  //If the original grid isn't solvable then tell the user and return\n  if (!solvable) {\n    document.getElementById(\"Error\").innerHTML = \"Duplicate detected. Grid has no solution.\";\n    return;\n  } else {\n    document.getElementById(\"Error\").innerHTML = \"\";\n  } //Show all the moves\n\n\n  for (let i = 0; i < moves.length; i++) {\n    setTimeout(() => {\n      Node(moves[i][0], moves[i][1]).className = \"node-start\"; //color node about to be changed\n    }, 5000 * Math.pow(i, 0.25) - 5000);\n    setTimeout(() => {\n      Node(moves[i][0], moves[i][1]).value = moves[i][2];\n\n      if (moves[i][2] === 0) {\n        Node(moves[i][0], moves[i][1]).className = \"node\"; //color visited nodes\n      } else {\n        Node(moves[i][0], moves[i][1]).className = \"node-finish\"; //color visited nodes\n      }\n    }, 5000 * Math.pow(i + 1, 0.25) - 5000);\n  } //check if grid has been solved\n\n\n  setTimeout(() => {\n    let solved = true;\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        console.log(Node(row, col).value);\n\n        if (Node(row, col).value === \"0\") {\n          document.getElementById(\"Error\").innerHTML = \"Grid does not have a solution :(\";\n          solved = false;\n          break;\n        }\n      }\n    }\n\n    if (solved) {\n      document.getElementById(\"Error\").innerHTML = \"Grid Solved. Boom.\";\n    }\n  }, 5000 * Math.pow(moves.length + 1, 0.25) - 5000);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Trapping_Water/my-app/src/algorithms/visualizeInitialAlg.js"],"names":["Node","row","col","document","getElementById","visualizeBacktracking","moves","solvable","innerHTML","i","length","setTimeout","className","Math","pow","value","solved","console","log"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nexport default function visualizeBacktracking(moves, solvable) {\r\n  //If the original grid isn't solvable then tell the user and return\r\n  if (!solvable) {\r\n    document.getElementById(\"Error\").innerHTML =\r\n      \"Duplicate detected. Grid has no solution.\"\r\n    return\r\n  } else {\r\n    document.getElementById(\"Error\").innerHTML = \"\"\r\n  }\r\n\r\n  //Show all the moves\r\n  for (let i = 0; i < moves.length; i++) {\r\n    setTimeout(() => {\r\n      Node(moves[i][0], moves[i][1]).className = \"node-start\" //color node about to be changed\r\n    }, 5000 * Math.pow(i, 0.25) - 5000)\r\n    setTimeout(() => {\r\n      Node(moves[i][0], moves[i][1]).value = moves[i][2]\r\n      if (moves[i][2] === 0) {\r\n        Node(moves[i][0], moves[i][1]).className = \"node\" //color visited nodes\r\n      } else {\r\n        Node(moves[i][0], moves[i][1]).className = \"node-finish\" //color visited nodes\r\n      }\r\n    }, 5000 * Math.pow(i + 1, 0.25) - 5000)\r\n  }\r\n\r\n  //check if grid has been solved\r\n  setTimeout(() => {\r\n    let solved = true\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        console.log(Node(row, col).value)\r\n        if (Node(row, col).value === \"0\") {\r\n          document.getElementById(\"Error\").innerHTML =\r\n            \"Grid does not have a solution :(\"\r\n          solved = false\r\n          break\r\n        }\r\n      }\r\n    }\r\n    if (solved) {\r\n      document.getElementById(\"Error\").innerHTML = \"Grid Solved. Boom.\"\r\n    }\r\n  }, 5000 * Math.pow(moves.length + 1, 0.25) - 5000)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}