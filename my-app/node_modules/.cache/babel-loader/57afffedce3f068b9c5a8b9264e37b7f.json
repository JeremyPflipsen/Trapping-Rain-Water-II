{"ast":null,"code":"function checkRow(grid, row, value) {\n  for (let col = 0; col < 9; col++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkCol(grid, col, value) {\n  for (let row = 0; row < 9; row++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkSquare(grid, row, col, value) {\n  let squareRow = Math.floor(row / 3) * 3;\n  let squareCol = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[squareRow + i][squareCol + j] === value) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkValue(grid, row, col, value) {\n  if (checkRow(grid, row, value) && checkCol(grid, col, value) && checkSquare(grid, row, col, value)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction nextEmptySpot(grid) {\n  for (var row = 0; row < 9; row++) {\n    for (var col = 0; col < 9; col++) {\n      if (grid[row][col] === 0 || grid[row][col] === '0') {\n        return [row, col];\n      }\n    }\n  }\n\n  return [-1, -1];\n}\n\nfunction solve(grid, moves) {\n  let emptySpot = nextEmptySpot(grid);\n  let row = emptySpot[0];\n  let col = emptySpot[1];\n\n  if (row === -1) {\n    return;\n  }\n\n  for (let num = 1; num <= 9; num++) {\n    if (checkValue(grid, row, col, num)) {\n      grid[row][col] = num;\n      moves.push([row, col, num]);\n      solve(grid, moves);\n    }\n\n    if (nextEmptySpot(grid)[0] !== -1) {\n      grid[row][col] = 0;\n      moves.push([row, col, 0]);\n    }\n  }\n}\n\nexport default function backtracking(grid) {\n  let moves = []; //check if the initial board state is solvable\n\n  let solvable = true;\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (!checkValue(grid, row, col, grid[row][col])) {\n        document.getElementById('backtrackHasSolution').innerHTML = 'Duplicate detected. Grid has no solution.';\n        return [];\n      }\n    }\n  } //call main solve function that does all the work\n\n\n  solve(grid, moves);\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/backtracking.js"],"names":["checkRow","grid","row","value","col","checkCol","checkSquare","squareRow","Math","floor","squareCol","i","j","checkValue","nextEmptySpot","solve","moves","emptySpot","num","push","backtracking","solvable","document","getElementById","innerHTML"],"mappings":"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","sourcesContent":["function checkRow(grid, row, value) {\r\n    for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkCol(grid, col, value) {\r\n    for (let row = 0; row < 9; row++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkSquare(grid, row, col,value) {\r\n    let squareRow = Math.floor(row/3)*3\r\n    let squareCol = Math.floor(col/3)*3\r\n\r\n    for (let i = 0; i<3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (grid[squareRow + i][squareCol + j] === value)\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkValue(grid, row, col, value) {\r\n    if (checkRow(grid, row, value) &&\r\n        checkCol(grid, col,value) &&\r\n        checkSquare(grid, row,col,value)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\nfunction nextEmptySpot(grid ) {\r\n    for (var row = 0; row < 9; row++){\r\n        for (var col = 0; col <9; col++){\r\n            if (grid[row][col] === 0 || grid[row][col] === '0') {\r\n                return [row,col]\r\n            }\r\n        }\r\n    }\r\n    return [-1,-1]\r\n}\r\n\r\nfunction solve(grid,moves) {\r\n    let emptySpot = nextEmptySpot(grid)\r\n    let row = emptySpot[0]\r\n    let col = emptySpot[1]\r\n\r\n    if (row === -1) {\r\n        return\r\n    }\r\n\r\n    for (let num = 1; num <=9; num++) {\r\n        if (checkValue(grid, row,col,num)){\r\n            grid[row][col] = num\r\n            moves.push([row,col,num])\r\n            solve(grid,moves)\r\n        }\r\n\r\n    if(nextEmptySpot(grid)[0] !== -1) {\r\n        grid[row][col] = 0\r\n        moves.push([row,col,0])\r\n    }\r\n    }\r\n}\r\n\r\nexport default function backtracking(grid) {\r\n\r\n    let moves = []\r\n\r\n    //check if the initial board state is solvable\r\n    let solvable = true\r\n    for (let row =0; row < 9; row ++) {\r\n        for (let col=0; col < 9; col++){\r\n            if (!checkValue(grid,row,col,grid[row][col])){\r\n                document.getElementById('backtrackHasSolution').innerHTML = 'Duplicate detected. Grid has no solution.'\r\n                return []\r\n            }\r\n        }\r\n    }\r\n\r\n    //call main solve function that does all the work\r\n    solve(grid,moves)\r\n\r\n    return moves\r\n}"]},"metadata":{},"sourceType":"module"}