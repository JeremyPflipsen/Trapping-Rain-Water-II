{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Sudoku\\\\my-app\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 9; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        console.log(\"didmount\");\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 0 && col === 0,\n          isFinish: row === 8 && col === 8\n        };\n        currentRow.push([currentNode]);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      // <div className = 'grid'>\n      //   {nodes.map((row, rowIdx) => {\n      //     return (\n      //       <div key={rowIdx}>\n      //         {row.map((node, nodeIdx) => {\n      //           const { isStart, isFinish } = node;\n      //           console.log(\"grid\")\n      //           return (\n      //             <Node>\n      //               key = {nodeIdx}\n      //               isStart = {isStart}\n      //               isFinish={isFinish}\n      //             </Node>\n      //           );\n      //         })}\n      //       </div>\n      //     );\n      //   })}\n      // </div>\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      })\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","console","log","currentNode","isStart","isFinish","push","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,6BAAP;AAEA,eAAe,MAAMC,qBAAN,SAAoCF,SAApC,CAA8C;AAC3DG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,cAAMC,WAAW,GAAG;AAClBH,UAAAA,GADkB;AAElBF,UAAAA,GAFkB;AAGlBM,UAAAA,OAAO,EAAEN,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,CAHZ;AAIlBK,UAAAA,QAAQ,EAAEP,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK;AAJb,SAApB;AAMAD,QAAAA,UAAU,CAACO,IAAX,CAAgB,CAACH,WAAD,CAAhB;AACD;;AACDP,MAAAA,KAAK,CAACU,IAAN,CAAWP,UAAX;AACD;;AACD,SAAKQ,QAAL,CAAc;AAAEX,MAAAA;AAAF,KAAd;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBF;AAsBD;;AApD0D","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 9; col++) {\r\n        console.log(\"didmount\")\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          isStart: row === 0 && col === 0,\r\n          isFinish: row === 8 && col === 8,\r\n        };\r\n        currentRow.push([currentNode]);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.setState({ nodes });\r\n  }\r\n\r\n  render() {\r\n    const { nodes } = this.state;\r\n\r\n    return (\r\n      // <div className = 'grid'>\r\n      //   {nodes.map((row, rowIdx) => {\r\n      //     return (\r\n      //       <div key={rowIdx}>\r\n      //         {row.map((node, nodeIdx) => {\r\n      //           const { isStart, isFinish } = node;\r\n      //           console.log(\"grid\")\r\n      //           return (\r\n      //             <Node>\r\n      //               key = {nodeIdx}\r\n      //               isStart = {isStart}\r\n      //               isFinish={isFinish}\r\n      //             </Node>\r\n      //           );\r\n      //         })}\r\n      //       </div>\r\n      //     );\r\n      //   })}\r\n      // </div>\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}