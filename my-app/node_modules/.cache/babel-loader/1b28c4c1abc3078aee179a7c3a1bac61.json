{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction getImmutableSquares(mutable) {\n  let count = 0;\n  let immutableSquares = [];\n  let squareRow = 0;\n  let squareCol = 0;\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (!mutable[row][col]) {\n          count++;\n        }\n      }\n    }\n\n    if (count >= 8) {\n      immutableSquares.push([squareRow, squareCol]);\n    }\n\n    count = 0;\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n  }\n\n  return immutableSquares;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction randomGrid(grid, mutable) {\n  // console.log(mutable)\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (mutable[row][col]) {\n        // console.log(row,col,grid[row][col])\n        grid[row][col] = getRandomInt(9) + 1; // console.log(row,col,grid[row][col])\n      }\n    }\n  }\n\n  console.log(grid);\n  return grid;\n}\n\nfunction solve(grid, moves, mutable) {\n  //check if any squares have 8 or 9 immutables\n  let immutableSquares = getImmutableSquares(mutable);\n\n  if (immutableSquares.length === 9) {\n    document.getElementById('Error').innerHTML = 'Trivial solution detected.';\n    return;\n  } //Step 1: initialize population\n\n\n  let population = [];\n  let N = 100; //population size\n  // for (let i = 0; i < N; i++){\n  //     //create random individual\n  //     moves.push(randomGrid(grid,mutable))\n  // }\n\n  moves.push(randomGrid(grid, mutable));\n  moves.push(randomGrid(grid, mutable)); //Step 2: Selection\n  //Create reproductive population\n\n  for (let i = 0; i < N; i++) {//evaluate error of each individual\n    //add individual to reproductive population according to its error\n  } //Step 3: Reproduction\n  //create new population from current reproductive population\n\n\n  for (let i = 0; i < N; i++) {//choose two random parents\n    //mix their info\n    //mutate\n  }\n}\n\nexport default function geneticAlgorithm(grid) {\n  let mutable = []; //Prevents the algorithm from changing original node values\n\n  for (let row = 0; row < 9; row++) {\n    let temp = [];\n\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0 || grid[row][col] === '0') {\n        temp.push(true);\n      } else {\n        temp.push(false);\n      }\n    }\n\n    mutable.push(temp);\n  } //a list of the moves the algorithm will take\n\n\n  let moves = [];\n  solve(grid, moves, mutable);\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/geneticAlgorithm.js"],"names":["Node","row","col","document","getElementById","getImmutableSquares","mutable","count","immutableSquares","squareRow","squareCol","square","push","getRandomInt","max","Math","floor","random","randomGrid","grid","console","log","solve","moves","length","innerHTML","population","N","i","geneticAlgorithm","temp"],"mappings":"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","sourcesContent":["\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction getImmutableSquares(mutable) {\r\n    let count = 0\r\n    let immutableSquares = []\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (!mutable[row][col]){\r\n                    count++\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (count >= 8) {\r\n            immutableSquares.push([squareRow,squareCol])\r\n        }\r\n\r\n        count = 0\r\n\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    return immutableSquares\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction randomGrid(grid,mutable) {\r\n    // console.log(mutable)\r\n    for (let row = 0; row < 9; row++) {\r\n        for (let col= 0; col< 9; col++){\r\n            if (mutable[row][col]) {\r\n                // console.log(row,col,grid[row][col])\r\n                grid[row][col] = getRandomInt(9) +1\r\n                // console.log(row,col,grid[row][col])\r\n            }\r\n        }\r\n    }\r\n    console.log(grid)\r\n    return grid\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n    //check if any squares have 8 or 9 immutables\r\n    let immutableSquares = getImmutableSquares(mutable)\r\n    if (immutableSquares.length === 9){\r\n        document.getElementById('Error').innerHTML = 'Trivial solution detected.'\r\n        return\r\n    }\r\n\r\n    //Step 1: initialize population\r\n    let population = []\r\n    let N = 100 //population size\r\n\r\n    // for (let i = 0; i < N; i++){\r\n    //     //create random individual\r\n    //     moves.push(randomGrid(grid,mutable))\r\n    // }\r\n    moves.push(randomGrid(grid,mutable))\r\n    moves.push(randomGrid(grid,mutable))\r\n\r\n    //Step 2: Selection\r\n    //Create reproductive population\r\n    for (let i = 0; i < N; i++){\r\n        //evaluate error of each individual\r\n        //add individual to reproductive population according to its error\r\n    }\r\n\r\n    //Step 3: Reproduction\r\n    //create new population from current reproductive population\r\n    for (let i = 0; i < N; i++){\r\n        //choose two random parents\r\n        \r\n        //mix their info\r\n\r\n        //mutate\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default function geneticAlgorithm (grid) {\r\n    let mutable = []\r\n\r\n    //Prevents the algorithm from changing original node values\r\n    for (let row = 0; row < 9; row ++) {\r\n        let temp = []\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0 || grid[row][col] === '0') {\r\n                temp.push(true)\r\n            }\r\n            else{\r\n                temp.push(false)\r\n            }\r\n        }\r\n        mutable.push(temp)\r\n    }\r\n\r\n    //a list of the moves the algorithm will take\r\n    let moves = []\r\n\r\n    solve(grid,moves, mutable)\r\n\r\n    return moves\r\n}"]},"metadata":{},"sourceType":"module"}