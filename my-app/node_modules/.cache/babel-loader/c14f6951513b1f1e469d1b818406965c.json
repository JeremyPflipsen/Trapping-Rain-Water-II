{"ast":null,"code":"export default function loadRGrid() {\n  let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  function checkRow(grid, row, value) {\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function checkCol(grid, col, value) {\n    for (let row = 0; row < 9; row++) {\n      if (grid[row][col] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function checkSquare(grid, row, col, value) {\n    let squareRow = Math.floor(row / 3) * 3;\n    let squareCol = Math.floor(col / 3) * 3;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (grid[squareRow + i][squareCol + j] === value) return false;\n      }\n    }\n\n    return true;\n  }\n\n  function checkValue(grid, row, col, value) {\n    if (checkRow(grid, row, value) && checkCol(grid, col, value) && checkSquare(grid, row, col, value)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  for (let row = 0; row < 0; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (Math.random() > 0.5) {\n        grid[row][col] = getRandomInt(9);\n\n        while (!checkValue(grid, row, col, grid[row][col])) {\n          grid[row][col] = getRandomInt(9);\n        }\n      }\n    }\n  }\n\n  return grid;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/loadRGrid.js"],"names":["loadRGrid","grid","getRandomInt","max","Math","floor","random","checkRow","row","value","col","checkCol","checkSquare","squareRow","squareCol","i","j","checkValue"],"mappings":"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","sourcesContent":["export default function loadRGrid() {\r\n    let grid = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n      }\r\n\r\n    function checkRow(grid, row, value) {\r\n        for (let col = 0; col < 9; col++) {\r\n            if (grid[row][col] === value) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    function checkCol(grid, col, value) {\r\n        for (let row = 0; row < 9; row++) {\r\n            if (grid[row][col] === value) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    function checkSquare(grid, row, col,value) {\r\n        let squareRow = Math.floor(row/3)*3\r\n        let squareCol = Math.floor(col/3)*3\r\n    \r\n        for (let i = 0; i<3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (grid[squareRow + i][squareCol + j] === value)\r\n                    return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    function checkValue(grid, row, col, value) {\r\n        if (checkRow(grid, row, value) &&\r\n            checkCol(grid, col,value) &&\r\n            checkSquare(grid, row,col,value)) {\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    for (let row=0; row < 0; row ++) {\r\n        for (let col=0; col< 9; col++) {\r\n          if (Math.random() > 0.5) {\r\n            grid[row][col] = getRandomInt(9)\r\n\r\n            while(!checkValue(grid,row,col,grid[row][col])) {\r\n                grid[row][col] = getRandomInt(9)\r\n            }\r\n          }\r\n\r\n        }\r\n    }\r\n\r\n    return grid\r\n}"]},"metadata":{},"sourceType":"module"}