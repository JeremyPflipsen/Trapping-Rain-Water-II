{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction pushToScreen(grid) {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n}\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nfunction removeElement(arrayName, arrayElement) {\n  for (var j = 0; j < arrayName.length; j++) {\n    for (var i = 0; i < arrayName.length; i++) {\n      if (arrayName[i] === arrayElement) arrayName.splice(i, 1);\n    }\n  }\n} //Fills in grid by rows\n// function fillInZeros(grid) {\n//     let nums= [1,2,3,4,5,6,7,8,9]\n//     for(let row = 0; row < 9; row++) {\n//         for (let col = 0; col < 9; col ++){\n//             if (grid[row][col] !== 0) {\n//                 nums[grid[row][col] - 1] = 0\n//             }\n//         }\n//         console.log(nums)\n//         removeElement(nums,0)\n//         console.log(nums)\n//         shuffle(nums)\n//         for (let col = 0; col < 9; col ++){\n//             if (grid[row][col] === 0) {\n//                 grid[row][col] = nums.pop()\n//             }\n//         }\n//         nums= [1,2,3,4,5,6,7,8,9]\n//     }\n// }\n//fills in grid by squares\n\n\nfunction fillInZeros(grid) {\n  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let squareRow = 0;\n  let squareCol = 0;\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (grid[row][col] !== 0) {\n          nums[grid[row][col] - 1] = 0;\n        }\n      }\n    }\n\n    removeElement(nums, 0);\n    shuffle(nums);\n\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (grid[row][col] === 0) {\n          grid[row][col] = nums.pop();\n        }\n      }\n    }\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n  }\n\n  pushToScreen(grid);\n}\n\nfunction energy(grid) {\n  let E = 0;\n  let seen = []; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  }\n\n  return E;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction move(grid, mutable, T, moves) {\n  //pick a random square\n  let squareRow = 3 * getRandomInt(3);\n  let squareCol = 3 * getRandomInt(3); //need to handle case where a full square in immutable\n  //pick a random 2 nodes in that square that aren't the same\n\n  let row1 = getRandomInt(3) + squareRow;\n  let col1 = getRandomInt(3) + squareCol;\n  let row2 = getRandomInt(3) + squareRow;\n  let col2 = getRandomInt(3) + squareCol;\n\n  while (!mutable[row1][col1]) {\n    row1 = getRandomInt(3) + squareRow;\n    col1 = getRandomInt(3) + squareCol;\n  }\n\n  while (!mutable[row2][col2]) {\n    while (row1 === row2 && col1 === col2) {\n      row1 = getRandomInt(3) + squareRow;\n      col1 = getRandomInt(3) + squareCol;\n    }\n  }\n\n  let EC = energy(grid);\n\n  if (EC === 0) {\n    return;\n  } //swap their values\n\n\n  let temp = grid[row2][col2];\n  grid[row2][col2] = grid[row1][col1];\n  grid[row1][col1] = temp;\n  let EN = energy(grid); //If new energy is less, keep new grid, otherwise switch back\n\n  if (EN < EC) {\n    moves.push([row1, col1, grid[row1][col1], EN], [row2, col2, grid[row2][col2], EN]);\n  } else {\n    let prob = Math.exp((EC - EN) / T); //prob to stay at new grid\n\n    if (prob < Math.random(0, 1)) {\n      //switch back\n      temp = grid[row2][col2];\n      grid[row2][col2] = grid[row1][col1];\n      grid[row1][col1] = temp;\n    } else {\n      moves.push([row1, col1, grid[row1][col1], EN], [row2, col2, grid[row2][col2], EN]);\n    }\n  } // console.log(EN)\n\n}\n\nfunction solve(grid, moves, mutable) {\n  fillInZeros(grid); // do moves that decrease energy\n\n  let Tmax = 10;\n  let Tmin = 0.1;\n\n  for (let T = Tmax; T > Tmin; T = 0.9999 * T) {\n    move(grid, mutable, T, moves);\n  }\n\n  console.log(moves.length, energy(grid));\n}\n\nexport default function simulatedAnnealing() {\n  const grid = [[0, 5, 1, 3, 6, 2, 7, 0, 0], [0, 4, 0, 0, 5, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 2, 5], [0, 8, 0, 0, 0, 0, 9, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 5, 0, 0, 0, 0, 8, 0], [1, 2, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 2, 8, 0, 0, 6, 0], [0, 0, 8, 5, 3, 4, 2, 9, 0]];\n  const mutable = [];\n\n  for (let row = 0; row < 9; row++) {\n    let temp = [];\n\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0) {\n        temp.push(true);\n      } else {\n        temp.push(false);\n      }\n    }\n\n    mutable.push(temp);\n  }\n\n  let moves = [];\n  pushToScreen(grid);\n  solve(grid, moves, mutable);\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/simulatedAnnealing.js"],"names":["Node","row","col","document","getElementById","pushToScreen","grid","value","shuffle","array","sort","Math","random","removeElement","arrayName","arrayElement","j","length","i","splice","fillInZeros","nums","squareRow","squareCol","square","pop","energy","E","seen","includes","push","getRandomInt","max","floor","move","mutable","T","moves","row1","col1","row2","col2","EC","temp","EN","prob","exp","solve","Tmax","Tmin","console","log","simulatedAnnealing"],"mappings":"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","sourcesContent":["\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction pushToScreen(grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n}\r\n\r\nfunction shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function removeElement(arrayName,arrayElement)\r\n {\r\n    for (var j = 0; j < arrayName.length; j++) {\r\n        for(var i=0; i<arrayName.length;i++ )\r\n        { \r\n            if(arrayName[i]===arrayElement)\r\n                arrayName.splice(i,1); \r\n        }\r\n    }\r\n  }\r\n\r\n//Fills in grid by rows\r\n// function fillInZeros(grid) {\r\n//     let nums= [1,2,3,4,5,6,7,8,9]\r\n\r\n//     for(let row = 0; row < 9; row++) {\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] !== 0) {\r\n//                 nums[grid[row][col] - 1] = 0\r\n//             }\r\n//         }\r\n//         console.log(nums)\r\n//         removeElement(nums,0)\r\n//         console.log(nums)\r\n//         shuffle(nums)\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] === 0) {\r\n//                 grid[row][col] = nums.pop()\r\n//             }\r\n//         }\r\n//         nums= [1,2,3,4,5,6,7,8,9]\r\n//     }\r\n// }\r\n\r\n//fills in grid by squares\r\nfunction fillInZeros(grid) {\r\n    let nums= [1,2,3,4,5,6,7,8,9]\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] !== 0) {\r\n                    nums[grid[row][col] - 1] = 0\r\n                }\r\n            }\r\n        }\r\n        removeElement(nums,0)\r\n        shuffle(nums)\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] === 0) {\r\n                    grid[row][col] = nums.pop()\r\n                }\r\n            }\r\n        }\r\n        nums= [1,2,3,4,5,6,7,8,9]\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    pushToScreen(grid)\r\n}\r\n\r\nfunction energy(grid) {\r\n    let E = 0\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n\r\n    return E\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\nfunction move (grid, mutable,T,moves) {\r\n    //pick a random square\r\n    let squareRow = 3*getRandomInt(3)\r\n    let squareCol = 3*getRandomInt(3)\r\n    //need to handle case where a full square in immutable\r\n\r\n    //pick a random 2 nodes in that square that aren't the same\r\n    let row1 = getRandomInt(3) + squareRow\r\n    let col1 = getRandomInt(3) + squareCol\r\n\r\n    let row2 = getRandomInt(3)+ squareRow\r\n    let col2 = getRandomInt(3)+ squareCol\r\n\r\n    while (!mutable[row1][col1]){\r\n        row1 = getRandomInt(3) + squareRow\r\n        col1 = getRandomInt(3) + squareCol\r\n    }\r\n\r\n    while (!mutable[row2][col2]) {\r\n        while (row1 === row2 && col1=== col2){\r\n            row1 = getRandomInt(3) + squareRow\r\n            col1 = getRandomInt(3) + squareCol\r\n        }\r\n    }\r\n\r\n    let EC = energy(grid)\r\n    if(EC === 0){\r\n        return\r\n    }\r\n\r\n    //swap their values\r\n    let temp = grid[row2][col2]\r\n    grid[row2][col2] = grid[row1][col1]\r\n    grid[row1][col1] = temp\r\n\r\n    let EN = energy(grid)\r\n    //If new energy is less, keep new grid, otherwise switch back\r\n    if (EN < EC) {\r\n        moves.push([row1,col1, grid[row1][col1],EN],[row2,col2,grid[row2][col2],EN])\r\n    }\r\n    else {\r\n        let prob = Math.exp((EC-EN)/T) //prob to stay at new grid\r\n        if (prob < Math.random(0,1)) {\r\n            //switch back\r\n            temp = grid[row2][col2]\r\n            grid[row2][col2] = grid[row1][col1]\r\n            grid[row1][col1] = temp\r\n        }\r\n        else {\r\n            moves.push([row1,col1, grid[row1][col1],EN],[row2,col2,grid[row2][col2],EN])\r\n        }\r\n    }\r\n    // console.log(EN)\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n    fillInZeros(grid)\r\n\r\n    // do moves that decrease energy\r\n    let Tmax = 10\r\n    let Tmin = 0.1\r\n    for (let T = Tmax; T > Tmin; T = 0.9999*T){\r\n        move(grid,mutable,T,moves)\r\n        \r\n    }\r\n\r\n    console.log(moves.length, energy(grid))\r\n}\r\n\r\nexport default function simulatedAnnealing () {\r\n    const grid = [\r\n        [0, 5, 1, 3, 6, 2, 7, 0, 0],\r\n        [0, 4, 0, 0, 5, 8, 0, 0, 0],\r\n        [0, 0, 0, 4, 0, 0, 0, 2, 5],\r\n        [0, 8, 0, 0, 0, 0, 9, 0, 3],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 5, 0, 0, 0, 0, 8, 0],\r\n        [1, 2, 0, 0, 0, 9, 0, 0, 0],\r\n        [0, 0, 0, 2, 8, 0, 0, 6, 0],\r\n        [0, 0, 8, 5, 3, 4, 2, 9, 0]\r\n    ]\r\n\r\n    const mutable = []\r\n\r\n    for (let row = 0; row < 9; row ++) {\r\n        let temp = []\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0) {\r\n                temp.push(true)\r\n            }\r\n            else{\r\n                temp.push(false)\r\n            }\r\n        }\r\n        mutable.push(temp)\r\n    }\r\n\r\n    let moves = []\r\n\r\n    pushToScreen(grid)\r\n\r\n    solve(grid,moves, mutable)\r\n\r\n    return moves\r\n}"]},"metadata":{},"sourceType":"module"}