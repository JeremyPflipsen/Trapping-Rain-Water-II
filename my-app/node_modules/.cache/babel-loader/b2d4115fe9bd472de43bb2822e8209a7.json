{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Sudoku\\\\my-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport Menu from './Menu';\nimport loadGrid from './grids/loadGrid';\nimport loadSGrid from './grids/loadSGrid';\nimport loadRGrid from './grids/loadRGrid.js';\nimport About from './About';\nimport selectAlg from './selectAlg';\nimport visualizeAlgorithm from './visualizeAlgorithm';\nimport Error from './Error';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      selectedAlg: 0\n    };\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this);\n    this.selectAlg = selectAlg.bind(this);\n    this.inputValueChange = this.inputValueChange.bind(this);\n    this.changeNodeVal = this.changeNodeVal.bind(this);\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice();\n    newGrid[row][col] = value;\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value;\n    let numVal = Number(value.charAt(value.length - 1));\n\n    if (numVal >= 0 && numVal <= 9) {\n      console.log(value.length);\n      let newGrid = this.state.grid.slice();\n      newGrid[row][col] = numVal;\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"Header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Algorithm Visualizer\"), /*#__PURE__*/React.createElement(Menu, {\n      selectAlg: this.selectAlg,\n      handleClick: () => this.visualizeAlgorithm(this.changeNodeVal),\n      loadSGrid: () => {\n        this.setState({\n          grid: loadSGrid()\n        }, () => loadGrid(this.state.grid));\n      },\n      loadRGrid: () => {\n        this.setState({\n          grid: loadRGrid()\n        }, () => loadGrid(this.state.grid));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flexbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(About, {\n      selectedAlg: this.state.selectedAlg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(PathfindingVisualizer, {\n      inputValueChange: this.inputValueChange,\n      grid: this.state.grid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Error, {\n      selectedAlg: this.state.selectedAlg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"p.s. I love you :heart:\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/App.js"],"names":["React","PathfindingVisualizer","Menu","loadGrid","loadSGrid","loadRGrid","About","selectAlg","visualizeAlgorithm","Error","App","Component","constructor","props","state","grid","selectedAlg","bind","inputValueChange","changeNodeVal","row","col","value","newGrid","slice","setState","event","target","numVal","Number","charAt","length","console","log","componentDidMount","nodes","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport Menu from './Menu'\nimport loadGrid from './grids/loadGrid'\nimport loadSGrid from './grids/loadSGrid'\nimport loadRGrid from './grids/loadRGrid.js'\nimport About from './About'\nimport selectAlg from './selectAlg'\nimport visualizeAlgorithm from './visualizeAlgorithm'\nimport Error from './Error'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      selectedAlg: 0\n    };\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this)\n    this.selectAlg = selectAlg.bind(this)\n    this.inputValueChange = this.inputValueChange.bind(this)\n    this.changeNodeVal = this.changeNodeVal.bind(this)\n  }\n\n  changeNodeVal (row,col,value) {\n    let newGrid = this.state.grid.slice()\n    newGrid[row][col] = value\n    this.setState({\n        grid: newGrid\n      })\n  }\n\n  inputValueChange (row,col,event){\n    let value = event.target.value\n    let numVal = Number(value.charAt(value.length - 1))\n\n    if (numVal >= 0 && numVal <= 9){\n      console.log(value.length)\n      let newGrid = this.state.grid.slice()\n      newGrid[row][col] = numVal\n      this.setState({\n        grid: newGrid\n      })\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className='Header'>Algorithm Visualizer</h1>\n        <Menu\n          selectAlg={this.selectAlg}\n          handleClick={() => this.visualizeAlgorithm(this.changeNodeVal)}\n          loadSGrid={() => {\n            this.setState({grid: loadSGrid()}, () => loadGrid(this.state.grid))}}\n          loadRGrid={() => {\n            this.setState({grid: loadRGrid()}, () => loadGrid(this.state.grid))}}\n        ></Menu>\n        <div className='flexbox'>\n          <About selectedAlg={this.state.selectedAlg}></About>\n          <PathfindingVisualizer inputValueChange={this.inputValueChange} grid={this.state.grid} ></PathfindingVisualizer>\n          <Error selectedAlg={this.state.selectedAlg}></Error>\n        </div>\n        <h3>p.s. I love you :heart:</h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}