{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Trapping_Water\\\\my-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport Menu from \"./Menu\";\nimport loadRGrid from \"./grids/loadRGrid.js\";\nimport About from \"./About\";\nimport selectAlg from \"./selectAlg\";\nimport visualizeAlgorithm from \"./visualizeAlgorithm\";\nimport Error from \"./Error\";\nimport visualizeInitialAlg from \"./algorithms/visualizeInitialAlg\";\nimport stepBackward from \"./stepBackward.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      tempGrid: \"\",\n      gridHeight: 9,\n      gridWidth: 9,\n      selectedAlg: 0,\n      mode: \"pause\",\n      //mode of playPause button\n      currIndex: 0 //how far we are though the moves array in visualizeInitialAlg\n\n    };\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this);\n    this.selectAlg = selectAlg.bind(this);\n    this.inputValueChange = this.inputValueChange.bind(this);\n    this.changeNodeVal = this.changeNodeVal.bind(this);\n    this.setGridHeight = this.setGridHeight.bind(this);\n    this.setGridWidth = this.setGridWidth.bind(this);\n    this.setGrid = this.setGrid.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.visualizeInitialAlg = visualizeInitialAlg.bind(this);\n    this.setCurrIndex = this.setCurrIndex.bind(this);\n    this.stepForward = this.stepForward.bind(this);\n    this.stepBackward = stepBackward.bind(this);\n  }\n\n  stepForward() {\n    //turn mode to play, then turn it back after 1 millisecond so that visualizeAlgorithm goes through 1 iteration.\n    this.setState({\n      mode: \"play\"\n    });\n    this.visualizeAlgorithm();\n    document.getElementById(\"playPause\").innerHTML = \"Play\"; //This overrides visualizeAlgorithm turning the playPause button to \"Pause\"\n\n    setTimeout(() => {\n      this.setState({\n        mode: \"pause\"\n      });\n    }, 1);\n  }\n\n  setCurrIndex(value) {\n    this.setState({\n      currIndex: value\n    });\n  }\n\n  getMode() {\n    return this.state.mode;\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice();\n    newGrid[row][col] = value;\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  setGridHeight(event) {\n    this.setState({\n      gridHeight: event.target.value\n    }); // console.log(\"gridHeight\", this.state.gridHeight)\n  }\n\n  setGridWidth(event) {\n    this.setState({\n      gridWidth: event.target.value\n    }); // console.log(\"gridWidth\", this.state.gridWidth)\n  }\n\n  setGrid(type) {\n    let nodes = []; //setGrid being called from entering dimensions\n\n    if (type === \"dimensionInput\") {\n      for (let i = 0; i < this.state.gridHeight; i++) {\n        let row = [];\n\n        for (let j = 0; j < this.state.gridWidth; j++) {\n          row.push(0);\n        }\n\n        nodes.push(row);\n      }\n\n      this.setState({\n        grid: nodes\n      });\n    } else {\n      //setGrid being called from entering array\n      this.setState({\n        grid: JSON.parse(this.state.tempGrid)\n      });\n    }\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value;\n    let numVal = Number(value);\n\n    if (numVal >= 0 && numVal <= 9) {\n      let newGrid = this.state.grid.slice();\n      newGrid[row][col] = numVal;\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Header\",\n        children: \"Algorithm Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        selectAlg: this.selectAlg,\n        gridHeight: this.state.gridHeight,\n        gridWidth: this.state.gridWidth,\n        tempGrid: this.state.tempGrid,\n        handleClick: () => this.visualizeAlgorithm(this.changeNodeVal),\n        stepForward: this.stepForward,\n        setGridHeight: x => this.setState({\n          gridHeight: x\n        }),\n        setGridWidth: x => this.setState({\n          gridWidth: x\n        }),\n        setTempGrid: x => this.setState({\n          tempGrid: x\n        }),\n        setGrid: this.setGrid,\n        loadRGrid: () => {\n          this.setState({\n            grid: loadRGrid(this.state.grid)\n          }, this.setState({\n            tempGrid: JSON.stringify(this.state.grid)\n          }));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(About, {\n          selectedAlg: this.state.selectedAlg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PathfindingVisualizer, {\n          inputValueChange: this.inputValueChange,\n          grid: this.state.grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Error, {\n          selectedAlg: this.state.selectedAlg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"p.s. I love you :heart:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hp/Desktop/Trapping_Water/my-app/src/App.js"],"names":["React","PathfindingVisualizer","Menu","loadRGrid","About","selectAlg","visualizeAlgorithm","Error","visualizeInitialAlg","stepBackward","App","Component","constructor","props","state","grid","tempGrid","gridHeight","gridWidth","selectedAlg","mode","currIndex","bind","inputValueChange","changeNodeVal","setGridHeight","setGridWidth","setGrid","getMode","setCurrIndex","stepForward","setState","document","getElementById","innerHTML","setTimeout","value","row","col","newGrid","slice","event","target","type","nodes","i","j","push","JSON","parse","numVal","Number","componentDidMount","render","x","stringify"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport \"./App.css\"\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\"\nimport Menu from \"./Menu\"\nimport loadRGrid from \"./grids/loadRGrid.js\"\nimport About from \"./About\"\nimport selectAlg from \"./selectAlg\"\nimport visualizeAlgorithm from \"./visualizeAlgorithm\"\nimport Error from \"./Error\"\nimport visualizeInitialAlg from \"./algorithms/visualizeInitialAlg\"\nimport stepBackward from \"./stepBackward.js\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: [],\n      tempGrid: \"\",\n      gridHeight: 9,\n      gridWidth: 9,\n      selectedAlg: 0,\n      mode: \"pause\", //mode of playPause button\n      currIndex: 0, //how far we are though the moves array in visualizeInitialAlg\n    }\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this)\n    this.selectAlg = selectAlg.bind(this)\n    this.inputValueChange = this.inputValueChange.bind(this)\n    this.changeNodeVal = this.changeNodeVal.bind(this)\n    this.setGridHeight = this.setGridHeight.bind(this)\n    this.setGridWidth = this.setGridWidth.bind(this)\n    this.setGrid = this.setGrid.bind(this)\n    this.getMode = this.getMode.bind(this)\n    this.visualizeInitialAlg = visualizeInitialAlg.bind(this)\n    this.setCurrIndex = this.setCurrIndex.bind(this)\n    this.stepForward = this.stepForward.bind(this)\n    this.stepBackward = stepBackward.bind(this)\n  }\n\n  stepForward() {\n    //turn mode to play, then turn it back after 1 millisecond so that visualizeAlgorithm goes through 1 iteration.\n    this.setState({ mode: \"play\" })\n    this.visualizeAlgorithm()\n    document.getElementById(\"playPause\").innerHTML = \"Play\" //This overrides visualizeAlgorithm turning the playPause button to \"Pause\"\n    setTimeout(() => {\n      this.setState({ mode: \"pause\" })\n    }, 1)\n  }\n\n  setCurrIndex(value) {\n    this.setState({ currIndex: value })\n  }\n\n  getMode() {\n    return this.state.mode\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice()\n    newGrid[row][col] = value\n    this.setState({\n      grid: newGrid,\n    })\n  }\n\n  setGridHeight(event) {\n    this.setState({\n      gridHeight: event.target.value,\n    })\n    // console.log(\"gridHeight\", this.state.gridHeight)\n  }\n\n  setGridWidth(event) {\n    this.setState({\n      gridWidth: event.target.value,\n    })\n    // console.log(\"gridWidth\", this.state.gridWidth)\n  }\n\n  setGrid(type) {\n    let nodes = []\n\n    //setGrid being called from entering dimensions\n    if (type === \"dimensionInput\") {\n      for (let i = 0; i < this.state.gridHeight; i++) {\n        let row = []\n        for (let j = 0; j < this.state.gridWidth; j++) {\n          row.push(0)\n        }\n        nodes.push(row)\n      }\n      this.setState({\n        grid: nodes,\n      })\n    } else {\n      //setGrid being called from entering array\n      this.setState({ grid: JSON.parse(this.state.tempGrid) })\n    }\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value\n    let numVal = Number(value)\n\n    if (numVal >= 0 && numVal <= 9) {\n      let newGrid = this.state.grid.slice()\n      newGrid[row][col] = numVal\n      this.setState({\n        grid: newGrid,\n      })\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n    this.setState({\n      grid: nodes,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Header\">Algorithm Visualizer</h1>\n        <Menu\n          selectAlg={this.selectAlg}\n          gridHeight={this.state.gridHeight}\n          gridWidth={this.state.gridWidth}\n          tempGrid={this.state.tempGrid}\n          handleClick={() => this.visualizeAlgorithm(this.changeNodeVal)}\n          stepForward={this.stepForward}\n          setGridHeight={(x) => this.setState({ gridHeight: x })}\n          setGridWidth={(x) => this.setState({ gridWidth: x })}\n          setTempGrid={(x) => this.setState({ tempGrid: x })}\n          setGrid={this.setGrid}\n          loadRGrid={() => {\n            this.setState(\n              { grid: loadRGrid(this.state.grid) },\n              this.setState({ tempGrid: JSON.stringify(this.state.grid) })\n            )\n          }}\n        ></Menu>\n        <div className=\"flexbox\">\n          <About selectedAlg={this.state.selectedAlg}></About>\n          <PathfindingVisualizer\n            inputValueChange={this.inputValueChange}\n            grid={this.state.grid}\n          ></PathfindingVisualizer>\n          <Error selectedAlg={this.state.selectedAlg}></Error>\n        </div>\n        <h3>p.s. I love you :heart:</h3>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}