{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nfunction removeElement(arrayName, arrayElement) {\n  for (var j = 0; j < arrayName.length; j++) {\n    for (var i = 0; i < arrayName.length; i++) {\n      if (arrayName[i] === arrayElement) arrayName.splice(i, 1);\n    }\n  }\n} //Fills in grid by rows\n// function fillInZeros(grid) {\n//     let nums= [1,2,3,4,5,6,7,8,9]\n//     for(let row = 0; row < 9; row++) {\n//         for (let col = 0; col < 9; col ++){\n//             if (grid[row][col] !== 0) {\n//                 nums[grid[row][col] - 1] = 0\n//             }\n//         }\n//         console.log(nums)\n//         removeElement(nums,0)\n//         console.log(nums)\n//         shuffle(nums)\n//         for (let col = 0; col < 9; col ++){\n//             if (grid[row][col] === 0) {\n//                 grid[row][col] = nums.pop()\n//             }\n//         }\n//         nums= [1,2,3,4,5,6,7,8,9]\n//     }\n// }\n//fills in grid by squares\n\n\nfunction fillInZeros(grid) {\n  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let squareRow = 0;\n  let squareCol = 0;\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (grid[row][col] !== 0) {\n          nums[grid[row][col] - 1] = 0;\n        }\n      }\n    }\n\n    removeElement(nums, 0);\n    shuffle(nums);\n\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (grid[row][col] === 0) {\n          grid[row][col] = nums.pop();\n        }\n      }\n    }\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n  }\n}\n\nfunction energy(grid) {\n  let E = 0;\n  let seen = []; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(grid[row][col])) {\n        E = E + 1;\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  }\n\n  return E;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction move(grid, mutable) {\n  //pick a random square\n  let squareRow = 3 * getRandomInt(3);\n  let squareCol = 3 * getRandomInt(3); //need to handle case where a full square in immutable\n  //pick a random 2 nodes in that square that aren't the same\n\n  let row1 = getRandomInt(3) + squareRow;\n  let col1 = getRandomInt(3) + squareCol;\n  let row2 = getRandomInt(3) + squareRow;\n  let col2 = getRandomInt(3) + squareCol;\n\n  while (!mutable[row1][col1]) {\n    row1 = getRandomInt(3) + squareRow;\n    col1 = getRandomInt(3) + squareCol;\n  }\n\n  while (row1 === row2 && col1 === col2 && mutable[row2][col2]) {\n    row2 = getRandomInt(3) + squareRow;\n    col2 = getRandomInt(3) + squareCol;\n  }\n\n  console.log(row1, col1);\n  console.log(row2, col2); //swap their values\n\n  let temp = grid[row2][col2];\n  grid[row2][col2] = grid[row1][col1];\n  grid[row1][col1] = temp;\n}\n\nfunction solve(grid, moves, mutable) {\n  fillInZeros(grid);\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  setTimeout(move(grid, mutable), 1000);\n}\n\nexport default function simulatedAnnealing() {\n  const grid = [[0, 5, 1, 3, 6, 2, 7, 0, 0], [0, 4, 0, 0, 5, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 2, 5], [0, 8, 0, 0, 0, 0, 9, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 5, 0, 0, 0, 0, 8, 0], [1, 2, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 2, 8, 0, 0, 6, 0], [0, 0, 8, 5, 3, 4, 2, 9, 0]];\n  const mutable = [];\n\n  for (let row = 0; row < 9; row++) {\n    let temp = [];\n\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0) {\n        temp.push(true);\n      } else {\n        temp.push(false);\n      }\n    }\n\n    mutable.push(temp);\n  }\n\n  let moves = [];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  solve(grid, moves, mutable);\n  setTimeout(() => {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        Node(row, col).value = grid[row][col];\n      }\n    }\n  }, 1000);\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/simulatedAnnealing.js"],"names":["Node","row","col","document","getElementById","shuffle","array","sort","Math","random","removeElement","arrayName","arrayElement","j","length","i","splice","fillInZeros","grid","nums","squareRow","squareCol","square","pop","energy","E","seen","includes","push","getRandomInt","max","floor","move","mutable","row1","col1","row2","col2","console","log","temp","solve","moves","value","setTimeout","simulatedAnnealing"],"mappings":"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","sourcesContent":["\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function removeElement(arrayName,arrayElement)\r\n {\r\n    for (var j = 0; j < arrayName.length; j++) {\r\n        for(var i=0; i<arrayName.length;i++ )\r\n        { \r\n            if(arrayName[i]===arrayElement)\r\n                arrayName.splice(i,1); \r\n        }\r\n    }\r\n  }\r\n\r\n//Fills in grid by rows\r\n// function fillInZeros(grid) {\r\n//     let nums= [1,2,3,4,5,6,7,8,9]\r\n\r\n//     for(let row = 0; row < 9; row++) {\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] !== 0) {\r\n//                 nums[grid[row][col] - 1] = 0\r\n//             }\r\n//         }\r\n//         console.log(nums)\r\n//         removeElement(nums,0)\r\n//         console.log(nums)\r\n//         shuffle(nums)\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] === 0) {\r\n//                 grid[row][col] = nums.pop()\r\n//             }\r\n//         }\r\n//         nums= [1,2,3,4,5,6,7,8,9]\r\n//     }\r\n// }\r\n\r\n//fills in grid by squares\r\nfunction fillInZeros(grid) {\r\n    let nums= [1,2,3,4,5,6,7,8,9]\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] !== 0) {\r\n                    nums[grid[row][col] - 1] = 0\r\n                }\r\n            }\r\n        }\r\n        removeElement(nums,0)\r\n        shuffle(nums)\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] === 0) {\r\n                    grid[row][col] = nums.pop()\r\n                }\r\n            }\r\n        }\r\n        nums= [1,2,3,4,5,6,7,8,9]\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n}\r\n\r\nfunction energy(grid) {\r\n    let E = 0\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n\r\n    return E\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\nfunction move (grid, mutable) {\r\n    //pick a random square\r\n    let squareRow = 3*getRandomInt(3)\r\n    let squareCol = 3*getRandomInt(3)\r\n    //need to handle case where a full square in immutable\r\n\r\n    //pick a random 2 nodes in that square that aren't the same\r\n    let row1 = getRandomInt(3) + squareRow\r\n    let col1 = getRandomInt(3) + squareCol\r\n\r\n    let row2 = getRandomInt(3)+ squareRow\r\n    let col2 = getRandomInt(3)+ squareCol\r\n\r\n    while (!mutable[row1][col1]){\r\n        row1 = getRandomInt(3) + squareRow\r\n        col1 = getRandomInt(3) + squareCol\r\n    }\r\n\r\n    while (row1 === row2 && col1 === col2 && mutable[row2][col2]) {\r\n        row2 = getRandomInt(3)+ squareRow\r\n        col2 = getRandomInt(3)+ squareCol\r\n    }\r\n\r\n    console.log(row1,col1)\r\n    console.log(row2,col2)\r\n\r\n    //swap their values\r\n    let temp = grid[row2][col2]\r\n    grid[row2][col2] = grid[row1][col1]\r\n    grid[row1][col1] = temp\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n    fillInZeros(grid)\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n\r\n    setTimeout(move(grid,mutable),1000)\r\n\r\n}\r\n\r\nexport default function simulatedAnnealing () {\r\n    const grid = [\r\n        [0, 5, 1, 3, 6, 2, 7, 0, 0],\r\n        [0, 4, 0, 0, 5, 8, 0, 0, 0],\r\n        [0, 0, 0, 4, 0, 0, 0, 2, 5],\r\n        [0, 8, 0, 0, 0, 0, 9, 0, 3],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 5, 0, 0, 0, 0, 8, 0],\r\n        [1, 2, 0, 0, 0, 9, 0, 0, 0],\r\n        [0, 0, 0, 2, 8, 0, 0, 6, 0],\r\n        [0, 0, 8, 5, 3, 4, 2, 9, 0]\r\n    ]\r\n\r\n    const mutable = []\r\n\r\n    for (let row = 0; row < 9; row ++) {\r\n        let temp = []\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0) {\r\n                temp.push(true)\r\n            }\r\n            else{\r\n                temp.push(false)\r\n            }\r\n        }\r\n        mutable.push(temp)\r\n    }\r\n\r\n    let moves = []\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n\r\n    solve(grid,moves, mutable)\r\n    \r\n    setTimeout(() => {\r\n        for (let row = 0; row < 9; row++){\r\n            for (let col = 0; col <9; col++){\r\n                Node(row,col).value = grid[row][col]\r\n            }\r\n        }\r\n    }, 1000)\r\n\r\n    return moves\r\n}"]},"metadata":{},"sourceType":"module"}