{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n//this function is bound to App\n\n\n_c = Node;\nexport default function visualizeInitialAlg(moves, solvable, getMode) {\n  //Check if matrix is too small\n  if (!solvable) {\n    console.log(\"matrix too small\");\n    document.getElementById(\"Error\").innerHTML = \"Matrix has no inner tiles. Total Water = 0.\";\n    return;\n  }\n\n  let currIndex = this.state.currIndex; //how far we are along moves\n\n  console.log(\"In visualizeInitialAlg\", currIndex); //reset className of <div id=\"end\"><div> if it's still highlighted fromprevious run\n\n  document.getElementById(\"end\").className = \"\";\n\n  if (currIndex < 1) {\n    //make initial border\n    let tempMoves = moves[0].currMoves;\n\n    for (let i = 0; i < tempMoves.length; i++) {\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-finish\";\n    } //color corners\n\n\n    tempMoves = moves[1].currMoves;\n\n    for (let i = 0; i < tempMoves.length; i++) {\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-visited\";\n    } //set About color\n\n\n    document.getElementById(\"step1\").className = \"currStep\"; //reset About color after a delay\n\n    setTimeout(() => {\n      document.getElementById(\"step1\").className = \"\";\n    }, 1500); //we finished step 0, so currIndex = 2 now\n\n    currIndex = 2;\n    setTimeout(() => {\n      helper(moves.slice(2));\n      return;\n    }, 1000);\n  } else {\n    helper(moves.slice(currIndex));\n    return;\n  } //show rest of moves\n\n\n  function helper(moves) {\n    //check if the pause button has been pressed\n    if (getMode() === \"pause\") {\n      console.log(currIndex);\n      return;\n    }\n\n    setTimeout(() => {\n      if (moves.length < 1) {\n        document.getElementById(\"end\").className = \"currStep\"; //update currIndex\n\n        this.setState({\n          currIndex: currIndex\n        });\n        return currIndex;\n      } //set About color\n\n\n      document.getElementById(`step${moves[0].currStep + 1}`).className = \"loopItem currStep\"; //reset About color\n\n      setTimeout(() => {\n        document.getElementById(`step${moves[0].currStep + 1}`).className = \"loopItem\";\n      }, 500); //update total and waterLevel on screen\n\n      document.getElementById(\"Error\").innerHTML = `Total Water: ${moves[0].total} \\n Water Level: ${moves[0].waterLevel}`;\n      let move;\n\n      if (moves[0].currStep === 1) {\n        //highlight lowest border node\n        move = moves[0].currMoves[0];\n        Node(move[0], move[1]).className = \"node-start\"; //remove highlight after 1 step\n\n        setTimeout(() => {\n          Node(move[0], move[1]).className = \"node-finish\";\n        }, 1000);\n      } else if (moves[0].currStep === 2) {\n        //add new border node\n        move = moves[0].currMoves[0];\n        Node(move[0], move[1]).className = \"node-finish\";\n      } else if (moves[0].currStep === 3) {\n        for (let i = 0; i < moves[0].currMoves.length; i++) {\n          //remove border node\n          move = moves[0].currMoves[i];\n          Node(move[0], move[1]).className = \"node-visited\";\n        }\n      } //we finished another step so increment currIndex\n\n\n      currIndex += 1; //recursive call\n\n      helper(moves.slice(1));\n    }, 500);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Trapping_Water/my-app/src/algorithms/visualizeInitialAlg.js"],"names":["Node","row","col","document","getElementById","visualizeInitialAlg","moves","solvable","getMode","console","log","innerHTML","currIndex","state","className","tempMoves","currMoves","i","length","setTimeout","helper","slice","setState","currStep","total","waterLevel","move"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\n//this function is bound to App\r\n\r\nexport default function visualizeInitialAlg(moves, solvable, getMode) {\r\n  //Check if matrix is too small\r\n  if (!solvable) {\r\n    console.log(\"matrix too small\")\r\n    document.getElementById(\"Error\").innerHTML =\r\n      \"Matrix has no inner tiles. Total Water = 0.\"\r\n    return\r\n  }\r\n\r\n  let currIndex = this.state.currIndex //how far we are along moves\r\n  console.log(\"In visualizeInitialAlg\", currIndex)\r\n\r\n  //reset className of <div id=\"end\"><div> if it's still highlighted fromprevious run\r\n  document.getElementById(\"end\").className = \"\"\r\n\r\n  if (currIndex < 1) {\r\n    //make initial border\r\n    let tempMoves = moves[0].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-finish\"\r\n    }\r\n    //color corners\r\n    tempMoves = moves[1].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node-visited\"\r\n    }\r\n\r\n    //set About color\r\n    document.getElementById(\"step1\").className = \"currStep\"\r\n    //reset About color after a delay\r\n    setTimeout(() => {\r\n      document.getElementById(\"step1\").className = \"\"\r\n    }, 1500)\r\n\r\n    //we finished step 0, so currIndex = 2 now\r\n    currIndex = 2\r\n\r\n    setTimeout(() => {\r\n      helper(moves.slice(2))\r\n      return\r\n    }, 1000)\r\n  } else {\r\n    helper(moves.slice(currIndex))\r\n    return\r\n  }\r\n\r\n  //show rest of moves\r\n  function helper(moves) {\r\n    //check if the pause button has been pressed\r\n    if (getMode() === \"pause\") {\r\n      console.log(currIndex)\r\n      return\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (moves.length < 1) {\r\n        document.getElementById(\"end\").className = \"currStep\"\r\n        //update currIndex\r\n        this.setState({ currIndex: currIndex })\r\n        return currIndex\r\n      }\r\n\r\n      //set About color\r\n      document.getElementById(`step${moves[0].currStep + 1}`).className =\r\n        \"loopItem currStep\"\r\n      //reset About color\r\n      setTimeout(() => {\r\n        document.getElementById(`step${moves[0].currStep + 1}`).className =\r\n          \"loopItem\"\r\n      }, 500)\r\n\r\n      //update total and waterLevel on screen\r\n      document.getElementById(\r\n        \"Error\"\r\n      ).innerHTML = `Total Water: ${moves[0].total} \\n Water Level: ${moves[0].waterLevel}`\r\n\r\n      let move\r\n      if (moves[0].currStep === 1) {\r\n        //highlight lowest border node\r\n        move = moves[0].currMoves[0]\r\n        Node(move[0], move[1]).className = \"node-start\"\r\n        //remove highlight after 1 step\r\n        setTimeout(() => {\r\n          Node(move[0], move[1]).className = \"node-finish\"\r\n        }, 1000)\r\n      } else if (moves[0].currStep === 2) {\r\n        //add new border node\r\n        move = moves[0].currMoves[0]\r\n        Node(move[0], move[1]).className = \"node-finish\"\r\n      } else if (moves[0].currStep === 3) {\r\n        for (let i = 0; i < moves[0].currMoves.length; i++) {\r\n          //remove border node\r\n          move = moves[0].currMoves[i]\r\n          Node(move[0], move[1]).className = \"node-visited\"\r\n        }\r\n      }\r\n\r\n      //we finished another step so increment currIndex\r\n      currIndex += 1\r\n      //recursive call\r\n      helper(moves.slice(1))\r\n    }, 500)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}