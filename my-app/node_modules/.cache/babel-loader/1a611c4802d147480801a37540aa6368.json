{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction NodeVal(row, col) {\n  return Number(Node(row, col).value);\n}\n\nfunction pushToScreen(grid) {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n}\n\nfunction showErrors() {\n  let Error = 0;\n  let seen = [];\n  let squareRow = 0;\n  let squareCol = 0; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(NodeVal(row, col))) {\n        Node(row, col).className = \"node-finish\";\n        Error++;\n      } else {\n        seen.push(NodeVal(row, col));\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(NodeVal(row, col))) {\n        Node(row, col).className = \"node-finish\";\n        Error++;\n      } else {\n        seen.push(NodeVal(row, col));\n      }\n    }\n\n    seen = [];\n  } //Check the squares\n\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (seen.includes(NodeVal(row, col))) {\n          Node(row, col).className = \"node-finish\";\n          Error++;\n        } else {\n          seen.push(NodeVal(row, col));\n        }\n      }\n    }\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n\n    seen = [];\n  }\n\n  return Error;\n}\n\nfunction clearErrors() {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).className = \"node\";\n    }\n  }\n}\n\nexport default function visualizeGeneticAlgorithm(moves) {\n  // console.log(moves)\n  //Show all the moves\n  let Error = 0;\n\n  for (let i = 0; i < moves.length; i++) {\n    // console.log(moves[i])\n    setTimeout(() => {\n      pushToScreen(moves[i]);\n      clearErrors();\n      Error = showErrors(); // document.getElementById(\"Error\").innerHTML = `Generation: ${\n      //   i + 1\n      // } <br></br> Error: ${Error}`\n    }, 5000 * Math.log(i + 1));\n  }\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeGeneticAlgorithm.js"],"names":["Node","row","col","document","getElementById","NodeVal","Number","value","pushToScreen","grid","showErrors","Error","seen","squareRow","squareCol","includes","className","push","square","clearErrors","visualizeGeneticAlgorithm","moves","i","length","setTimeout","Math","log"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction NodeVal(row, col) {\r\n  return Number(Node(row, col).value)\r\n}\r\n\r\nfunction pushToScreen(grid) {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      Node(row, col).value = grid[row][col]\r\n    }\r\n  }\r\n}\r\n\r\nfunction showErrors() {\r\n  let Error = 0\r\n  let seen = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  //check the rows\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (seen.includes(NodeVal(row, col))) {\r\n        Node(row, col).className = \"node-finish\"\r\n        Error++\r\n      } else {\r\n        seen.push(NodeVal(row, col))\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //check the columns\r\n  for (let col = 0; col < 9; col++) {\r\n    for (let row = 0; row < 9; row++) {\r\n      if (seen.includes(NodeVal(row, col))) {\r\n        Node(row, col).className = \"node-finish\"\r\n        Error++\r\n      } else {\r\n        seen.push(NodeVal(row, col))\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //Check the squares\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (seen.includes(NodeVal(row, col))) {\r\n          Node(row, col).className = \"node-finish\"\r\n          Error++\r\n        } else {\r\n          seen.push(NodeVal(row, col))\r\n        }\r\n      }\r\n    }\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n\r\n    seen = []\r\n  }\r\n\r\n  return Error\r\n}\r\n\r\nfunction clearErrors() {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      Node(row, col).className = \"node\"\r\n    }\r\n  }\r\n}\r\n\r\nexport default function visualizeGeneticAlgorithm(moves) {\r\n  // console.log(moves)\r\n  //Show all the moves\r\n  let Error = 0\r\n  for (let i = 0; i < moves.length; i++) {\r\n    // console.log(moves[i])\r\n    setTimeout(() => {\r\n      pushToScreen(moves[i])\r\n      clearErrors()\r\n      Error = showErrors()\r\n      // document.getElementById(\"Error\").innerHTML = `Generation: ${\r\n      //   i + 1\r\n      // } <br></br> Error: ${Error}`\r\n    }, 5000 * Math.log(i + 1))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}