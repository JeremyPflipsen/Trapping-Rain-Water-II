{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n//this function is bound to App\n//so that it can call the functions in App\n\n\n_c = Node;\nexport default function stepBackward(moves, solvable) {\n  //copy funtions from app so they can be called within helper\n  let setCurrIndex = this.setCurrIndex;\n  let currIndex = this.state.currIndex;\n\n  if (currIndex < 2) {\n    //no previous move so return\n    return;\n  } else if (currIndex === 2) {\n    //Only first step is done so undo first step\n    //make initial border\n    let tempMoves = moves[0].currMoves;\n\n    for (let i = 0; i < tempMoves.length; i++) {\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\";\n    } //color corners\n\n\n    tempMoves = moves[1].currMoves;\n\n    for (let i = 0; i < tempMoves.length; i++) {\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\";\n    } //set About color\n\n\n    document.getElementById(\"step1\").style.background = \"rgba(255, 0, 43, 0)\"; //we finished step 0, so currIndex = 2 now\n\n    currIndex = 0;\n    this.setState({\n      currIndex: currIndex\n    });\n  } else {\n    //no more special cases, check the currStep\n    helper();\n  }\n\n  function helper() {\n    if (moves.length === currIndex) {\n      document.getElementById(\"end\").className = \"\";\n      return currIndex;\n    } //reset About color for current step\n\n\n    document.getElementById(`step${moves[currIndex].currStep + 1}`).style.background = \"rgba(255, 0, 43, 0)\"; //set background opacity of last item to 0 to remove highlighting.\n    //set About color from previous step\n\n    document.getElementById(`step${moves[currIndex - 1].currStep + 1}`).style.background = \"rgba(255, 0, 43, 0.3)\"; //update total and waterLevel on screen\n\n    document.getElementById(\"Error\").innerHTML = `Total Water: ${moves[currIndex - 1].total} \\n Water Level: ${moves[currIndex - 1].waterLevel}`;\n    let move;\n    let prevMove;\n\n    if (moves[currIndex - 1].currStep === 1) {\n      //highlight lowest border node\n      move = moves[currIndex - 1].currMoves[0];\n      Node(move[0], move[1]).className = \"node-start\";\n    } else if (moves[currIndex - 1].currStep === 2) {\n      //add new border node\n      move = moves[currIndex - 1].currMoves[0];\n      Node(move[0], move[1]).className = \"node-finish\";\n    } else if (moves[currIndex - 1].currStep === 3) {\n      //remove highlighting of lowest border node from step 1\n      prevMove = moves[currIndex].currMoves[0];\n      Node(prevMove[0], prevMove[1]).className = \"node-finish\";\n\n      for (let i = 0; i < moves[currIndex - 1].currMoves.length; i++) {\n        //remove border node\n        move = moves[currIndex - 1].currMoves[i];\n        Node(move[0], move[1]).className = \"node-visited\";\n      }\n    } //we finished another step so increment currIndex\n\n\n    currIndex -= 1;\n    setCurrIndex(currIndex);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Trapping_Water/my-app/src/stepBackward.js"],"names":["Node","row","col","document","getElementById","stepBackward","moves","solvable","setCurrIndex","currIndex","state","tempMoves","currMoves","i","length","className","style","background","setState","helper","currStep","innerHTML","total","waterLevel","move","prevMove"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\n//this function is bound to App\r\n//so that it can call the functions in App\r\n\r\nexport default function stepBackward(moves, solvable) {\r\n  //copy funtions from app so they can be called within helper\r\n  let setCurrIndex = this.setCurrIndex\r\n  let currIndex = this.state.currIndex\r\n\r\n  if (currIndex < 2) {\r\n    //no previous move so return\r\n    return\r\n  } else if (currIndex === 2) {\r\n    //Only first step is done so undo first step\r\n    //make initial border\r\n    let tempMoves = moves[0].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\"\r\n    }\r\n    //color corners\r\n    tempMoves = moves[1].currMoves\r\n    for (let i = 0; i < tempMoves.length; i++) {\r\n      Node(tempMoves[i][0], tempMoves[i][1]).className = \"node\"\r\n    }\r\n\r\n    //set About color\r\n    document.getElementById(\"step1\").style.background = \"rgba(255, 0, 43, 0)\"\r\n\r\n    //we finished step 0, so currIndex = 2 now\r\n    currIndex = 0\r\n    this.setState({ currIndex: currIndex })\r\n  } else {\r\n    //no more special cases, check the currStep\r\n    helper()\r\n  }\r\n\r\n  function helper() {\r\n    if (moves.length === currIndex) {\r\n      document.getElementById(\"end\").className = \"\"\r\n      return currIndex\r\n    }\r\n\r\n    //reset About color for current step\r\n    document.getElementById(\r\n      `step${moves[currIndex].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0)\" //set background opacity of last item to 0 to remove highlighting.\r\n    //set About color from previous step\r\n    document.getElementById(\r\n      `step${moves[currIndex - 1].currStep + 1}`\r\n    ).style.background = \"rgba(255, 0, 43, 0.3)\"\r\n\r\n    //update total and waterLevel on screen\r\n    document.getElementById(\"Error\").innerHTML = `Total Water: ${\r\n      moves[currIndex - 1].total\r\n    } \\n Water Level: ${moves[currIndex - 1].waterLevel}`\r\n\r\n    let move\r\n    let prevMove\r\n    if (moves[currIndex - 1].currStep === 1) {\r\n      //highlight lowest border node\r\n      move = moves[currIndex - 1].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-start\"\r\n    } else if (moves[currIndex - 1].currStep === 2) {\r\n      //add new border node\r\n      move = moves[currIndex - 1].currMoves[0]\r\n      Node(move[0], move[1]).className = \"node-finish\"\r\n    } else if (moves[currIndex - 1].currStep === 3) {\r\n      //remove highlighting of lowest border node from step 1\r\n      prevMove = moves[currIndex].currMoves[0]\r\n      Node(prevMove[0], prevMove[1]).className = \"node-finish\"\r\n\r\n      for (let i = 0; i < moves[currIndex - 1].currMoves.length; i++) {\r\n        //remove border node\r\n        move = moves[currIndex - 1].currMoves[i]\r\n        Node(move[0], move[1]).className = \"node-visited\"\r\n      }\r\n    }\r\n\r\n    //we finished another step so increment currIndex\r\n    currIndex -= 1\r\n    setCurrIndex(currIndex)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}