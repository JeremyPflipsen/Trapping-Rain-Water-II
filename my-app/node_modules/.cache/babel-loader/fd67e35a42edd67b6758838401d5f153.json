{"ast":null,"code":"function showErrors(grid) {\n  let seen = []; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(grid[row][col])) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(grid[row][col])) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  }\n}\n\nexport default function visualizeSimulatedAnnealing(moves) {}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeSimulatedAnnealing.js"],"names":["showErrors","grid","seen","row","col","includes","Node","className","push","visualizeSimulatedAnnealing","moves"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACtB,MAAIC,IAAI,GAAG,EAAX,CADsB,CAGtB;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,UAAIF,IAAI,CAACG,QAAL,CAAcJ,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,CAAd,CAAJ,EAAmC;AAC/BE,QAAAA,IAAI,CAACH,GAAD,EAAKC,GAAL,CAAJ,CAAcG,SAAd,GAA0B,aAA1B;AACH,OAFD,MAGK;AACDL,QAAAA,IAAI,CAACM,IAAL,CAAUP,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,CAAV;AACH;AACJ;;AACDF,IAAAA,IAAI,GAAG,EAAP;AACH,GAdqB,CAetB;;;AACA,OAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,SAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,UAAID,IAAI,CAACG,QAAL,CAAcJ,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,CAAd,CAAJ,EAAmC;AAC/BE,QAAAA,IAAI,CAACH,GAAD,EAAKC,GAAL,CAAJ,CAAcG,SAAd,GAA0B,aAA1B;AACH,OAFD,MAGK;AACDL,QAAAA,IAAI,CAACM,IAAL,CAAUP,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,CAAV;AACH;AACJ;;AACDF,IAAAA,IAAI,GAAG,EAAP;AACH;AACJ;;AAED,eAAe,SAASO,2BAAT,CAAqCC,KAArC,EAA4C,CAE1D","sourcesContent":["function showErrors(grid) {\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n}\r\n\r\nexport default function visualizeSimulatedAnnealing(moves) {\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}