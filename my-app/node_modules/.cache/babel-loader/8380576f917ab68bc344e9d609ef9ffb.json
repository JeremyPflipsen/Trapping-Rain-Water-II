{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction showErrors(grid) {\n  let seen = []; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(grid[row][col])) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(grid[row][col])) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(grid[row][col]);\n      }\n    }\n\n    seen = [];\n  }\n}\n\nexport default function visualizeSimulatedAnnealing(moves) {\n  for (let i = 0; i < moves.length; i++) {\n    // row = moves[i][0]\n    // col = moves[i][1]\n    // value = moves[i][2]\n    // setTimeout(() => {\n    //     Node(moves[i][0],moves[i][1]).className = 'node-start'\n    // }, 5000*Math.pow(Math.log(i+1),0.5)-2000)\n    // setTimeout(() => {\n    //     Node(moves[i][0],moves[i][1]).value = moves[i][2]\n    //     Node(moves[i][0],moves[i][1]).className = 'node-finish'\n    // }, 5000*Math.pow(Math.log(i+2),0.5)-2000)\n    setTimeout(() => {\n      Node(moves[i][0], moves[i][1]).className = 'node-start'; //color node about to be changed\n    }, 5000 * Math.pow(i, 0.25) - 5500);\n    setTimeout(() => {\n      Node(moves[i][0], moves[i][1]).value = moves[i][2];\n\n      if (moves[i][2] === 0) {\n        Node(moves[i][0], moves[i][1]).className = 'node'; //color visited nodes\n      } else {\n        Node(moves[i][0], moves[i][1]).className = 'node-finish'; //color visited nodes\n      }\n    }, 5000 * Math.pow(i + 1, 0.25) - 5500);\n  }\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeSimulatedAnnealing.js"],"names":["Node","row","col","document","getElementById","showErrors","grid","seen","includes","className","push","visualizeSimulatedAnnealing","moves","i","length","setTimeout","Math","pow","value"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction showErrors(grid) {\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n}\r\n\r\nexport default function visualizeSimulatedAnnealing(moves) {\r\n    for (let i = 0; i < moves.length; i++) {\r\n        // row = moves[i][0]\r\n        // col = moves[i][1]\r\n        // value = moves[i][2]\r\n        // setTimeout(() => {\r\n        //     Node(moves[i][0],moves[i][1]).className = 'node-start'\r\n        // }, 5000*Math.pow(Math.log(i+1),0.5)-2000)\r\n        // setTimeout(() => {\r\n        //     Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n        //     Node(moves[i][0],moves[i][1]).className = 'node-finish'\r\n        // }, 5000*Math.pow(Math.log(i+2),0.5)-2000)\r\n    \r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\r\n        }, 5000*Math.pow(i,0.25)-5500)\r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n            if (moves[i][2] === 0){\r\n                Node(moves[i][0],moves[i][1]).className = 'node' //color visited nodes\r\n            }\r\n            else {\r\n                Node(moves[i][0],moves[i][1]).className = 'node-finish' //color visited nodes\r\n            }\r\n        }, 5000*Math.pow(i+1,0.25)-5500)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}