{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Sudoku\\\\my-app\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nimport backtracking from '../algorithms/backtracking.js';\nimport loadGrid from './loadGrid';\nimport visualizeBacktracking from '../algorithms/visualizeBacktracking.js';\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      selectedAlg: 0\n    };\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this);\n    this.changeAlgorithm = this.changeAlgorithm.bind(this);\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 9; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        const currentNode = {\n          col,\n          row,\n          actualValue: 0,\n          isStart: false,\n          isFinish: false\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  visualizeAlgorithm() {\n    switch (this.state.selectedAlg) {\n      case 0:\n        console.log(\"No algorithm selected!\");\n        break;\n\n      case 1:\n        let moves = backtracking(this.state.grid);\n        visualizeBacktracking(moves);\n        break;\n\n      default:\n        console.log(\"You selected an algorithm!\");\n        break;\n    }\n  }\n\n  changeAlgorithm(event) {\n    const {\n      value\n    } = event.target;\n    this.setState({\n      selectedAlg: Number(value)\n    }); // WHY IS THIS SENDING A STRING WTF\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedAlg,\n      onChange: this.changeAlgorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Please select an algorithm\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, \"Algorithm 1\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Algorithm 2\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAlgorithm(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Visualize Algorithm\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => loadGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"Load Grid\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          col,\n          row,\n          isStart,\n          isFinish,\n          actualValue\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          row: row,\n          isStart: isStart,\n          isFinish: isFinish,\n          actualValue: actualValue,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","backtracking","loadGrid","visualizeBacktracking","PathfindingVisualizer","constructor","props","state","grid","selectedAlg","visualizeAlgorithm","bind","changeAlgorithm","componentDidMount","nodes","row","currentRow","col","currentNode","actualValue","isStart","isFinish","push","setState","console","log","moves","event","value","target","Number","render","map","rowIdx","node","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\nimport backtracking from '../algorithms/backtracking.js'\r\nimport loadGrid from './loadGrid'\r\nimport visualizeBacktracking from '../algorithms/visualizeBacktracking.js'\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      selectedAlg: 0\r\n    };\r\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this)\r\n    this.changeAlgorithm = this.changeAlgorithm.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 9; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          actualValue: 0,\r\n          isStart: false,\r\n          isFinish: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.setState({\r\n      grid: nodes\r\n    });\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    switch(this.state.selectedAlg) {\r\n      case 0:\r\n        console.log(\"No algorithm selected!\")\r\n        break\r\n      case 1:\r\n        let moves = backtracking(this.state.grid)\r\n        visualizeBacktracking(moves)\r\n        break\r\n      default:\r\n        console.log(\"You selected an algorithm!\")\r\n        break\r\n    }\r\n  }\r\n\r\n  changeAlgorithm(event) {\r\n    const {value} = event.target\r\n    this.setState({\r\n      selectedAlg: Number(value)\r\n    }) // WHY IS THIS SENDING A STRING WTF\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <select\r\n          value = {this.state.selectedAlg}\r\n          onChange = {this.changeAlgorithm}\r\n        >\r\n          <option value={0}>Please select an algorithm</option>\r\n          <option value={1}>Algorithm 1</option>\r\n          <option value={2}>Algorithm 2</option>\r\n        </select>\r\n        <button onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize Algorithm\r\n        </button>\r\n        <button onClick={() => loadGrid()}>\r\n          Load Grid\r\n          </button>\r\n        <div className = 'grid'>\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { col, row, isStart, isFinish, actualValue } = node;\r\n                  return (\r\n                    <Node \r\n                      key = {nodeIdx}\r\n                      col = {col}\r\n                      row = {row}\r\n                      isStart = {isStart}\r\n                      isFinish={isFinish}\r\n                      actualValue={actualValue}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}