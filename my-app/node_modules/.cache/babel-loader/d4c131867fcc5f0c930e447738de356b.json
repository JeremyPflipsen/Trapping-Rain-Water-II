{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction NodeVal(row, col) {\n  return parseInt(document.getElementById(`node-${row}-${col}`).value);\n}\n\nfunction checkRow(grid, row, value) {\n  for (let col = 0; col < 9; col++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkCol(grid, col, value) {\n  for (let row = 0; row < 9; row++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkSquare(grid, row, col, value) {\n  let squareRow = Math.floor(row / 3) * 3;\n  let squareCol = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[squareRow + i][squareCol + j] === value) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkValue(grid, row, col, value) {\n  if (checkRow(grid, row, value) && checkCol(grid, col, value) && checkSquare(grid, row, col, value)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction nextEmptySpot(grid) {\n  for (var row = 0; row < 9; row++) {\n    for (var col = 0; col < 9; col++) {\n      if (grid[row][col] === 0) {\n        return [row, col];\n      }\n    }\n  }\n\n  return [-1, -1];\n}\n\nfunction solve(grid, moves) {\n  let emptySpot = nextEmptySpot(grid);\n  let row = emptySpot[0];\n  let col = emptySpot[1];\n\n  if (row === -1) {\n    return;\n  }\n\n  for (let num = 1; num <= 9; num++) {\n    if (checkValue(grid, row, col, num)) {\n      grid[row][col] = num;\n      moves.push([row, col, num]);\n      solve(grid, moves);\n    }\n\n    if (nextEmptySpot(grid)[0] !== -1) {\n      grid[row][col] = 0;\n    }\n  }\n}\n\nexport default function backtracking() {\n  const grid = [[0, 5, 1, 3, 6, 2, 7, 0, 0], [0, 4, 0, 0, 5, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 2, 5], [0, 8, 0, 0, 0, 0, 9, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 5, 0, 0, 0, 0, 8, 0], [1, 2, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 2, 8, 0, 0, 6, 0], [0, 0, 8, 5, 3, 4, 2, 9, 0]];\n  let moves = [];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  solve(grid, moves);\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  console.log(moves);\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/backtracking.js"],"names":["Node","row","col","document","getElementById","NodeVal","parseInt","value","checkRow","grid","checkCol","checkSquare","squareRow","Math","floor","squareCol","i","j","checkValue","nextEmptySpot","solve","moves","emptySpot","num","push","backtracking","console","log"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction NodeVal(row, col){\r\n    return parseInt(document.getElementById(`node-${row}-${col}`).value)\r\n}\r\n\r\nfunction checkRow(grid, row, value) {\r\n    for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkCol(grid, col, value) {\r\n    for (let row = 0; row < 9; row++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkSquare(grid, row, col,value) {\r\n    let squareRow = Math.floor(row/3)*3\r\n    let squareCol = Math.floor(col/3)*3\r\n\r\n    for (let i = 0; i<3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (grid[squareRow + i][squareCol + j] === value)\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkValue(grid, row, col, value) {\r\n    if (checkRow(grid, row, value) &&\r\n        checkCol(grid, col,value) &&\r\n        checkSquare(grid, row,col,value)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\nfunction nextEmptySpot(grid ) {\r\n    for (var row = 0; row < 9; row++){\r\n        for (var col = 0; col <9; col++){\r\n            if (grid[row][col] === 0) {\r\n                return [row,col]\r\n            }\r\n        }\r\n    }\r\n    return [-1,-1]\r\n}\r\n\r\nfunction solve(grid,moves) {\r\n    let emptySpot = nextEmptySpot(grid)\r\n    let row = emptySpot[0]\r\n    let col = emptySpot[1]\r\n\r\n    if (row === -1) {\r\n        return\r\n    }\r\n\r\n    for (let num = 1; num <=9; num++) {\r\n        if (checkValue(grid, row,col,num)){\r\n            grid[row][col] = num\r\n            moves.push([row,col,num])\r\n            solve(grid,moves)\r\n        }\r\n\r\n    if(nextEmptySpot(grid)[0] !== -1) {\r\n        grid[row][col] = 0\r\n    }\r\n    }\r\n}\r\n\r\nexport default function backtracking() {\r\n    const grid = [\r\n        [0, 5, 1, 3, 6, 2, 7, 0, 0],\r\n        [0, 4, 0, 0, 5, 8, 0, 0, 0],\r\n        [0, 0, 0, 4, 0, 0, 0, 2, 5],\r\n        [0, 8, 0, 0, 0, 0, 9, 0, 3],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 5, 0, 0, 0, 0, 8, 0],\r\n        [1, 2, 0, 0, 0, 9, 0, 0, 0],\r\n        [0, 0, 0, 2, 8, 0, 0, 6, 0],\r\n        [0, 0, 8, 5, 3, 4, 2, 9, 0]\r\n    ]\r\n\r\n    let moves = []\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n\r\n    solve(grid,moves)\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n    console.log(moves)\r\n}"]},"metadata":{},"sourceType":"module"}