{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Trapping_Water\\\\my-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport Menu from \"./Menu\";\nimport loadGrid from \"./grids/loadGrid\";\nimport loadSGrid from \"./grids/loadSGrid\";\nimport loadRGrid from \"./grids/loadRGrid.js\";\nimport About from \"./About\";\nimport selectAlg from \"./selectAlg\";\nimport visualizeAlgorithm from \"./visualizeAlgorithm\";\nimport Error from \"./Error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      gridHeight: 9,\n      gridWidth: 9,\n      selectedAlg: 0\n    };\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this);\n    this.selectAlg = selectAlg.bind(this);\n    this.inputValueChange = this.inputValueChange.bind(this);\n    this.changeNodeVal = this.changeNodeVal.bind(this);\n    this.setGridHeight = this.setGridHeight.bind(this);\n    this.setGridWidth = this.setGridWidth.bind(this);\n    this.setGrid = this.setGrid.bind(this);\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice();\n    newGrid[row][col] = value;\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  setGridHeight(event) {\n    this.setState({\n      gridHeight: event.target.value\n    }); // console.log(\"gridHeight\", this.state.gridHeight)\n  }\n\n  setGridWidth(event) {\n    this.setState({\n      gridWidth: event.target.value\n    }); // console.log(\"gridWidth\", this.state.gridWidth)\n  }\n\n  setGrid(event) {\n    console.log(event === null);\n    let nodes = [];\n\n    for (let i = 0; i < this.state.gridHeight; i++) {\n      let row = [];\n\n      for (let j = 0; j < this.state.gridWidth; j++) {\n        row.push(0);\n      }\n\n      nodes.push(row);\n    }\n\n    this.setState({\n      grid: nodes\n    }); // console.log(\"AppGrid:\", this.state.grid)\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value;\n    let numVal = Number(value);\n\n    if (numVal >= 0 && numVal <= 9) {\n      let newGrid = this.state.grid.slice();\n      newGrid[row][col] = numVal;\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Header\",\n        children: \"Algorithm Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        selectAlg: this.selectAlg,\n        gridHeight: this.state.gridHeight,\n        gridWidth: this.state.gridWidth,\n        grid: this.state.grid,\n        handleClick: () => this.visualizeAlgorithm(this.changeNodeVal),\n        setGridHeight: this.setGridHeight,\n        setGridWidth: this.setGridWidth,\n        setGrid: this.setGrid,\n        loadSGrid: () => {\n          this.setState({\n            grid: loadSGrid()\n          }, () => loadGrid(this.state.grid));\n        },\n        loadRGrid: () => {\n          this.setState({\n            grid: loadRGrid(this.state.grid)\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(About, {\n          selectedAlg: this.state.selectedAlg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PathfindingVisualizer, {\n          inputValueChange: this.inputValueChange,\n          grid: this.state.grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Error, {\n          selectedAlg: this.state.selectedAlg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"p.s. I love you :heart:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hp/Desktop/Trapping_Water/my-app/src/App.js"],"names":["React","PathfindingVisualizer","Menu","loadGrid","loadSGrid","loadRGrid","About","selectAlg","visualizeAlgorithm","Error","App","Component","constructor","props","state","grid","gridHeight","gridWidth","selectedAlg","bind","inputValueChange","changeNodeVal","setGridHeight","setGridWidth","setGrid","row","col","value","newGrid","slice","setState","event","target","console","log","nodes","i","j","push","numVal","Number","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport \"./App.css\"\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\"\nimport Menu from \"./Menu\"\nimport loadGrid from \"./grids/loadGrid\"\nimport loadSGrid from \"./grids/loadSGrid\"\nimport loadRGrid from \"./grids/loadRGrid.js\"\nimport About from \"./About\"\nimport selectAlg from \"./selectAlg\"\nimport visualizeAlgorithm from \"./visualizeAlgorithm\"\nimport Error from \"./Error\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: [],\n      gridHeight: 9,\n      gridWidth: 9,\n      selectedAlg: 0,\n    }\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this)\n    this.selectAlg = selectAlg.bind(this)\n    this.inputValueChange = this.inputValueChange.bind(this)\n    this.changeNodeVal = this.changeNodeVal.bind(this)\n    this.setGridHeight = this.setGridHeight.bind(this)\n    this.setGridWidth = this.setGridWidth.bind(this)\n    this.setGrid = this.setGrid.bind(this)\n  }\n\n  changeNodeVal(row, col, value) {\n    let newGrid = this.state.grid.slice()\n    newGrid[row][col] = value\n    this.setState({\n      grid: newGrid,\n    })\n  }\n\n  setGridHeight(event) {\n    this.setState({\n      gridHeight: event.target.value,\n    })\n    // console.log(\"gridHeight\", this.state.gridHeight)\n  }\n\n  setGridWidth(event) {\n    this.setState({\n      gridWidth: event.target.value,\n    })\n    // console.log(\"gridWidth\", this.state.gridWidth)\n  }\n\n  setGrid(event) {\n    console.log(event === null)\n    let nodes = []\n    for (let i = 0; i < this.state.gridHeight; i++) {\n      let row = []\n      for (let j = 0; j < this.state.gridWidth; j++) {\n        row.push(0)\n      }\n      nodes.push(row)\n    }\n\n    this.setState({\n      grid: nodes,\n    })\n    // console.log(\"AppGrid:\", this.state.grid)\n  }\n\n  inputValueChange(row, col, event) {\n    let value = event.target.value\n    let numVal = Number(value)\n\n    if (numVal >= 0 && numVal <= 9) {\n      let newGrid = this.state.grid.slice()\n      newGrid[row][col] = numVal\n      this.setState({\n        grid: newGrid,\n      })\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n    this.setState({\n      grid: nodes,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Header\">Algorithm Visualizer</h1>\n        <Menu\n          selectAlg={this.selectAlg}\n          gridHeight={this.state.gridHeight}\n          gridWidth={this.state.gridWidth}\n          grid={this.state.grid}\n          handleClick={() => this.visualizeAlgorithm(this.changeNodeVal)}\n          setGridHeight={this.setGridHeight}\n          setGridWidth={this.setGridWidth}\n          setGrid={this.setGrid}\n          loadSGrid={() => {\n            this.setState({ grid: loadSGrid() }, () =>\n              loadGrid(this.state.grid)\n            )\n          }}\n          loadRGrid={() => {\n            this.setState({ grid: loadRGrid(this.state.grid) })\n          }}\n        ></Menu>\n        <div className=\"flexbox\">\n          <About selectedAlg={this.state.selectedAlg}></About>\n          <PathfindingVisualizer\n            inputValueChange={this.inputValueChange}\n            grid={this.state.grid}\n          ></PathfindingVisualizer>\n          <Error selectedAlg={this.state.selectedAlg}></Error>\n        </div>\n        <h3>p.s. I love you :heart:</h3>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}