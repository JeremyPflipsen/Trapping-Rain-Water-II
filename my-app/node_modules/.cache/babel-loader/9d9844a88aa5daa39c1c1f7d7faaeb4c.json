{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction NodeVal(row, col) {\n  return Number(Node(row, col).value);\n}\n\nfunction clearErrors() {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).className = 'node';\n    }\n  }\n}\n\nfunction showErrors(length) {\n  let seen = [];\n  setTimeout(() => {\n    //check the rows\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (seen.includes(NodeVal(row, col))) {\n          Node(row, col).className = 'node-finish';\n        } else {\n          seen.push(NodeVal(row, col));\n        }\n      }\n\n      seen = [];\n    } //check the columns\n\n\n    for (let col = 0; col < 9; col++) {\n      for (let row = 0; row < 9; row++) {\n        if (seen.includes(NodeVal(row, col))) {\n          Node(row, col).className = 'node-finish';\n        } else {\n          seen.push(NodeVal(row, col));\n        }\n      }\n\n      seen = [];\n    }\n  }, 1000 * Math.log(Math.pow(length + 2, 5)));\n}\n\nexport default function visualizeSimulatedAnnealing(moves, changeNodeVal) {\n  for (let i = 2; i < moves.length; i = i + 2) {\n    setTimeout(() => {\n      clearErrors();\n      showErrors();\n      Node(moves[i][0], moves[i][1]).className = 'node-start'; //color node about to be changed\n\n      Node(moves[i + 1][0], moves[i + 1][1]).className = 'node-start';\n      document.getElementById('Error').innerHTML = `Error: ${moves[i - 2][3]}`;\n    }, 1000 * Math.log(Math.pow(i, 5)));\n    setTimeout(() => {\n      Node(moves[i][0], moves[i][1]).value = moves[i][2];\n      Node(moves[i + 1][0], moves[i + 1][1]).value = moves[i + 1][2]; // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\n      // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\n      // Node(moves[i][0],moves[i][1]).className = 'node' //remove color from previous node if we back up\n      // Node(moves[i+1][0],moves[i+1][1]).className = 'node'\n    }, 1000 * Math.log(Math.pow(i + 2, 5)));\n  } // This starts off linear but tapers off fast. The first two squares stay yellow for whatever reason\n  //     setTimeout(() => {\n  //         Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\n  //         Node(moves[i+1][0],moves[i+1][1]).className = 'node-start'\n  //         document.getElementById('Error').innerHTML = `Error: ${moves[i-2][3]}`\n  //     }, (i < 20 ? 1000*i +1000: 18000 + 4000*Math.sqrt(Math.log(i-20))))\n  //     setTimeout(() => {\n  //         Node(moves[i][0],moves[i][1]).value = moves[i][2]\n  //         Node(moves[i+1][0],moves[i+1][1]).value = moves[i+1][2]\n  //         // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\n  //         // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\n  //         Node(moves[i][0],moves[i][1]).className = 'node' //remove color from previous node if we back up\n  //         Node(moves[i+1][0],moves[i+1][1]).className = 'node'\n  //     },  (i < 21 ? 1000*(i+1)+1000 : 18000 + 4000*Math.sqrt(Math.log(i+1-20))))\n  // }\n  // showErrors(moves.length)\n\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeSimulatedAnnealing.js"],"names":["Node","row","col","document","getElementById","NodeVal","Number","value","clearErrors","className","showErrors","length","seen","setTimeout","includes","push","Math","log","pow","visualizeSimulatedAnnealing","moves","changeNodeVal","i","innerHTML"],"mappings":"AAAA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACpB,SAAOC,QAAQ,CAACC,cAAT,CAAyB,QAAOH,GAAI,IAAGC,GAAI,EAA3C,CAAP;AACH,C,CAAC;;;AAEF,SAASG,OAAT,CAAiBJ,GAAjB,EAAqBC,GAArB,EAA0B;AACtB,SAAOI,MAAM,CAACN,IAAI,CAACC,GAAD,EAAKC,GAAL,CAAJ,CAAcK,KAAf,CAAb;AACH;;AAED,SAASC,WAAT,GAAuB;AACnB,OAAK,IAAIP,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9B,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9BF,MAAAA,IAAI,CAACC,GAAD,EAAKC,GAAL,CAAJ,CAAcO,SAAd,GAA0B,MAA1B;AACH;AACJ;AACJ;;AAED,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,MAAIC,IAAI,GAAG,EAAX;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACb;AACJ,SAAK,IAAIZ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,YAAIU,IAAI,CAACE,QAAL,CAAcT,OAAO,CAACJ,GAAD,EAAKC,GAAL,CAArB,CAAJ,EAAqC;AACjCF,UAAAA,IAAI,CAACC,GAAD,EAAKC,GAAL,CAAJ,CAAcO,SAAd,GAA0B,aAA1B;AACH,SAFD,MAGK;AACDG,UAAAA,IAAI,CAACG,IAAL,CAAUV,OAAO,CAACJ,GAAD,EAAKC,GAAL,CAAjB;AACH;AACJ;;AACDU,MAAAA,IAAI,GAAG,EAAP;AACH,KAZgB,CAajB;;;AACA,SAAK,IAAIV,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,WAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAmC;AAC/B,YAAIW,IAAI,CAACE,QAAL,CAAcT,OAAO,CAACJ,GAAD,EAAKC,GAAL,CAArB,CAAJ,EAAqC;AACjCF,UAAAA,IAAI,CAACC,GAAD,EAAKC,GAAL,CAAJ,CAAcO,SAAd,GAA0B,aAA1B;AACH,SAFD,MAGK;AACDG,UAAAA,IAAI,CAACG,IAAL,CAAUV,OAAO,CAACJ,GAAD,EAAKC,GAAL,CAAjB;AACH;AACJ;;AACDU,MAAAA,IAAI,GAAG,EAAP;AACH;AACA,GAzBS,EAyBP,OAAKI,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASP,MAAM,GAAC,CAAhB,EAAkB,CAAlB,CAAT,CAzBE,CAAV;AA0BH;;AAED,eAAe,SAASQ,2BAAT,CAAqCC,KAArC,EAA2CC,aAA3C,EAA0D;AACrE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACT,MAA1B,EAAkCW,CAAC,GAAGA,CAAC,GAAC,CAAxC,EAA2C;AAEvCT,IAAAA,UAAU,CAAC,MAAM;AACbL,MAAAA,WAAW;AACXE,MAAAA,UAAU;AACVV,MAAAA,IAAI,CAACoB,KAAK,CAACE,CAAD,CAAL,CAAS,CAAT,CAAD,EAAaF,KAAK,CAACE,CAAD,CAAL,CAAS,CAAT,CAAb,CAAJ,CAA8Bb,SAA9B,GAA0C,YAA1C,CAHa,CAG0C;;AACvDT,MAAAA,IAAI,CAACoB,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAAD,EAAeF,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAAf,CAAJ,CAAkCb,SAAlC,GAA8C,YAA9C;AACAN,MAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCmB,SAAjC,GAA8C,UAASH,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAAc,EAArE;AACH,KANS,EAMP,OAAKN,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASI,CAAT,EAAW,CAAX,CAAT,CANE,CAAV;AAQAT,IAAAA,UAAU,CAAC,MAAM;AACbb,MAAAA,IAAI,CAACoB,KAAK,CAACE,CAAD,CAAL,CAAS,CAAT,CAAD,EAAaF,KAAK,CAACE,CAAD,CAAL,CAAS,CAAT,CAAb,CAAJ,CAA8Bf,KAA9B,GAAsCa,KAAK,CAACE,CAAD,CAAL,CAAS,CAAT,CAAtC;AACAtB,MAAAA,IAAI,CAACoB,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAAD,EAAeF,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAAf,CAAJ,CAAkCf,KAAlC,GAA0Ca,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,CAAX,CAA1C,CAFa,CAGb;AACA;AACA;AACA;AACH,KAPS,EAOP,OAAKN,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASI,CAAC,GAAC,CAAX,EAAa,CAAb,CAAT,CAPE,CAAV;AAQH,GAnBoE,CAqBzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEI;;AACH","sourcesContent":["function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction NodeVal(row,col) {\r\n    return Number(Node(row,col).value)\r\n}\r\n\r\nfunction clearErrors() {\r\n    for (let row = 0; row < 9; row ++){\r\n        for (let col = 0; col < 9; col ++){\r\n            Node(row,col).className = 'node'\r\n        }\r\n    }\r\n}\r\n\r\nfunction showErrors(length) {\r\n    let seen = []\r\n\r\n    setTimeout(() => {\r\n        //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    }, 1000*Math.log(Math.pow(length+2,5)))\r\n}\r\n\r\nexport default function visualizeSimulatedAnnealing(moves,changeNodeVal) {\r\n    for (let i = 2; i < moves.length; i = i+2) {\r\n    \r\n        setTimeout(() => {\r\n            clearErrors()\r\n            showErrors()\r\n            Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\r\n            Node(moves[i+1][0],moves[i+1][1]).className = 'node-start'\r\n            document.getElementById('Error').innerHTML = `Error: ${moves[i-2][3]}`\r\n        }, 1000*Math.log(Math.pow(i,5)))\r\n\r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n            Node(moves[i+1][0],moves[i+1][1]).value = moves[i+1][2]\r\n            // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\r\n            // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\r\n            // Node(moves[i][0],moves[i][1]).className = 'node' //remove color from previous node if we back up\r\n            // Node(moves[i+1][0],moves[i+1][1]).className = 'node'\r\n        }, 1000*Math.log(Math.pow(i+2,5)))\r\n    }\r\n\r\n// This starts off linear but tapers off fast. The first two squares stay yellow for whatever reason\r\n//     setTimeout(() => {\r\n//         Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\r\n//         Node(moves[i+1][0],moves[i+1][1]).className = 'node-start'\r\n//         document.getElementById('Error').innerHTML = `Error: ${moves[i-2][3]}`\r\n//     }, (i < 20 ? 1000*i +1000: 18000 + 4000*Math.sqrt(Math.log(i-20))))\r\n//     setTimeout(() => {\r\n//         Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n//         Node(moves[i+1][0],moves[i+1][1]).value = moves[i+1][2]\r\n//         // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\r\n//         // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\r\n//         Node(moves[i][0],moves[i][1]).className = 'node' //remove color from previous node if we back up\r\n//         Node(moves[i+1][0],moves[i+1][1]).className = 'node'\r\n        \r\n//     },  (i < 21 ? 1000*(i+1)+1000 : 18000 + 4000*Math.sqrt(Math.log(i+1-20))))\r\n// }\r\n\r\n    // showErrors(moves.length)\r\n}"]},"metadata":{},"sourceType":"module"}