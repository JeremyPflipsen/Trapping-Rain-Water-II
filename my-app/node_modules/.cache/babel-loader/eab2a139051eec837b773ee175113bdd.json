{"ast":null,"code":"import backtracking from './algorithms/backtracking';\nimport visualizeBacktracking from './algorithms/visualizeBacktracking.js';\nimport simulatedAnnealing from \"./algorithms/simulatedAnnealing\";\nimport visualizeSimulatedAnnealing from \"./algorithms/visualizeSimulatedAnnealing\";\nimport hillClimbing from \"./algorithms/hillClimbing\";\nimport geneticAlgorithm from './algorithms/geneticAlgorithm';\nimport visualizeGeneticAlgorithm from './algorithms/visualizeGeneticAlgorithm'; //This function is bound to App.js so that App may\n//call any algorithm and visualize it\n\nexport default function visualizeAlgorithm(changeNodeVal) {\n  let moves = [];\n\n  switch (this.state.selectedAlg) {\n    case 0:\n      console.log(\"No algorithm selected!\");\n      break;\n\n    case 1:\n      let temp = backtracking(this.state.grid);\n      moves = temp.moves;\n      visualizeBacktracking(moves, temp.solvable);\n      break;\n\n    case 2:\n      moves = hillClimbing(this.state.grid);\n      setTimeout(visualizeSimulatedAnnealing(moves, changeNodeVal), 1000);\n      break;\n\n    case 3:\n      moves = simulatedAnnealing(this.state.grid);\n      setTimeout(visualizeSimulatedAnnealing(moves, changeNodeVal), 1000);\n      break;\n\n    case 4:\n      moves = geneticAlgorithm(this.state.grid);\n      visualizeGeneticAlgorithm(moves);\n      break;\n\n    default:\n      console.log(\"You selected an algorithm!\");\n      break;\n  }\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/visualizeAlgorithm.js"],"names":["backtracking","visualizeBacktracking","simulatedAnnealing","visualizeSimulatedAnnealing","hillClimbing","geneticAlgorithm","visualizeGeneticAlgorithm","visualizeAlgorithm","changeNodeVal","moves","state","selectedAlg","console","log","temp","grid","solvable","setTimeout"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,2BAAP,MAAwC,0CAAxC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC,C,CAEA;AACA;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,aAA5B,EAA2C;AACtD,MAAIC,KAAK,GAAG,EAAZ;;AACA,UAAO,KAAKC,KAAL,CAAWC,WAAlB;AACE,SAAK,CAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA;;AAEF,SAAK,CAAL;AACE,UAAIC,IAAI,GAAGd,YAAY,CAAC,KAAKU,KAAL,CAAWK,IAAZ,CAAvB;AACAN,MAAAA,KAAK,GAAGK,IAAI,CAACL,KAAb;AACAR,MAAAA,qBAAqB,CAACQ,KAAD,EAAOK,IAAI,CAACE,QAAZ,CAArB;AACA;;AAEF,SAAK,CAAL;AACEP,MAAAA,KAAK,GAAGL,YAAY,CAAC,KAAKM,KAAL,CAAWK,IAAZ,CAApB;AACAE,MAAAA,UAAU,CAACd,2BAA2B,CAACM,KAAD,EAAOD,aAAP,CAA5B,EAAkD,IAAlD,CAAV;AACA;;AAEF,SAAK,CAAL;AACEC,MAAAA,KAAK,GAAGP,kBAAkB,CAAC,KAAKQ,KAAL,CAAWK,IAAZ,CAA1B;AACAE,MAAAA,UAAU,CAACd,2BAA2B,CAACM,KAAD,EAAOD,aAAP,CAA5B,EAAkD,IAAlD,CAAV;AACA;;AAEF,SAAK,CAAL;AACEC,MAAAA,KAAK,GAAGJ,gBAAgB,CAAC,KAAKK,KAAL,CAAWK,IAAZ,CAAxB;AACAT,MAAAA,yBAAyB,CAACG,KAAD,CAAzB;AACA;;AAEF;AACEG,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA;AA5BJ;AA8BH","sourcesContent":["import backtracking from './algorithms/backtracking'\r\nimport visualizeBacktracking from './algorithms/visualizeBacktracking.js'\r\nimport simulatedAnnealing from \"./algorithms/simulatedAnnealing\";\r\nimport visualizeSimulatedAnnealing from \"./algorithms/visualizeSimulatedAnnealing\";\r\nimport hillClimbing from \"./algorithms/hillClimbing\";\r\nimport geneticAlgorithm from './algorithms/geneticAlgorithm'\r\nimport visualizeGeneticAlgorithm from './algorithms/visualizeGeneticAlgorithm'\r\n\r\n//This function is bound to App.js so that App may\r\n//call any algorithm and visualize it\r\n\r\nexport default function visualizeAlgorithm(changeNodeVal) {\r\n    let moves = []\r\n    switch(this.state.selectedAlg) {\r\n      case 0:\r\n        console.log(\"No algorithm selected!\")\r\n        break\r\n\r\n      case 1:\r\n        let temp = backtracking(this.state.grid)\r\n        moves = temp.moves\r\n        visualizeBacktracking(moves,temp.solvable)\r\n        break\r\n\r\n      case 2:\r\n        moves = hillClimbing(this.state.grid)\r\n        setTimeout(visualizeSimulatedAnnealing(moves,changeNodeVal),1000)\r\n        break\r\n      \r\n      case 3:\r\n        moves = simulatedAnnealing(this.state.grid)\r\n        setTimeout(visualizeSimulatedAnnealing(moves,changeNodeVal),1000)\r\n        break\r\n\r\n      case 4:\r\n        moves = geneticAlgorithm(this.state.grid)\r\n        visualizeGeneticAlgorithm(moves)\r\n        break\r\n      \r\n      default:\r\n        console.log(\"You selected an algorithm!\")\r\n        break\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}