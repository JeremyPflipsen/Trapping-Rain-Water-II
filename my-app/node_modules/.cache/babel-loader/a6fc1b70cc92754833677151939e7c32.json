{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction pushToScreen(grid) {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n}\n\nexport default function visualizeGeneticAlgorithm(moves) {\n  // console.log(moves)\n  //Show all the moves\n  for (let i = 0; i < moves.length; i++) {\n    // console.log(moves[i])\n    setTimeout(() => {\n      pushToScreen(moves[i]);\n    }, 1000 * Math.log(i));\n  }\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeGeneticAlgorithm.js"],"names":["Node","row","col","document","getElementById","pushToScreen","grid","value","visualizeGeneticAlgorithm","moves","i","length","setTimeout","Math","log"],"mappings":"AAAA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACpB,SAAOC,QAAQ,CAACC,cAAT,CAAyB,QAAOH,GAAI,IAAGC,GAAI,EAA3C,CAAP;AACH,C,CAAC;;;AAEF,SAASG,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,OAAK,IAAIL,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAiC;AAC7B,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAE,CAAvB,EAA0BA,GAAG,EAA7B,EAAgC;AAC5BF,MAAAA,IAAI,CAACC,GAAD,EAAKC,GAAL,CAAJ,CAAcK,KAAd,GAAsBD,IAAI,CAACL,GAAD,CAAJ,CAAUC,GAAV,CAAtB;AACH;AACJ;AACJ;;AAED,eAAe,SAASM,yBAAT,CAAmCC,KAAnC,EAA0C;AACrD;AACA;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC;AACAE,IAAAA,UAAU,CAAC,MAAM;AACbP,MAAAA,YAAY,CAACI,KAAK,CAACC,CAAD,CAAN,CAAZ;AACH,KAFS,EAEP,OAAKG,IAAI,CAACC,GAAL,CAASJ,CAAT,CAFE,CAAV;AAIH;AACJ","sourcesContent":["function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction pushToScreen(grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n}\r\n\r\nexport default function visualizeGeneticAlgorithm(moves) {\r\n    // console.log(moves)\r\n    //Show all the moves\r\n    for (let i = 0; i < moves.length; i++) {\r\n        // console.log(moves[i])\r\n        setTimeout(() => {\r\n            pushToScreen(moves[i])\r\n        }, 1000*Math.log(i))\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}