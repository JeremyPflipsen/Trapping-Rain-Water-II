{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nfunction fillInZeros(grid) {\n  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] !== 0) {\n        nums.splice(grid[row][col] - 1, 1);\n      }\n    }\n\n    shuffle(nums);\n\n    for (let col = 0; col < 9; col++) {\n      if (grid[row][col] === 0) {\n        grid[row][col] = nums.pop();\n      }\n    }\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  }\n}\n\nfunction solve(grid) {\n  fillInZeros(grid);\n}\n\nexport default function simulatedAnnealing() {\n  const grid = [[0, 5, 1, 3, 6, 2, 7, 0, 0], [0, 4, 0, 0, 5, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 2, 5], [0, 8, 0, 0, 0, 0, 9, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 5, 0, 0, 0, 0, 8, 0], [1, 2, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 2, 8, 0, 0, 6, 0], [0, 0, 8, 5, 3, 4, 2, 9, 0]];\n  let moves = [];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  solve(grid, moves);\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n\n  return moves;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/simulatedAnnealing.js"],"names":["Node","row","col","document","getElementById","shuffle","array","sort","Math","random","fillInZeros","grid","nums","splice","pop","solve","simulatedAnnealing","moves","value"],"mappings":"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","sourcesContent":["\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\nfunction fillInZeros(grid) {\r\n    let nums= [1,2,3,4,5,6,7,8,9]\r\n\r\n    for(let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] !== 0) {\r\n                nums.splice(grid[row][col] - 1,1)\r\n            }\r\n        }\r\n        shuffle(nums)\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0) {\r\n                grid[row][col] = nums.pop()\r\n            }\r\n        }\r\n        nums= [1,2,3,4,5,6,7,8,9]\r\n    }\r\n}\r\n\r\nfunction solve(grid) {\r\n    fillInZeros(grid)\r\n}\r\n\r\nexport default function simulatedAnnealing () {\r\n    const grid = [\r\n        [0, 5, 1, 3, 6, 2, 7, 0, 0],\r\n        [0, 4, 0, 0, 5, 8, 0, 0, 0],\r\n        [0, 0, 0, 4, 0, 0, 0, 2, 5],\r\n        [0, 8, 0, 0, 0, 0, 9, 0, 3],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 5, 0, 0, 0, 0, 8, 0],\r\n        [1, 2, 0, 0, 0, 9, 0, 0, 0],\r\n        [0, 0, 0, 2, 8, 0, 0, 6, 0],\r\n        [0, 0, 8, 5, 3, 4, 2, 9, 0]\r\n    ]\r\n\r\n    let moves = []\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n\r\n    solve(grid,moves)\r\n\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n\r\n    return moves\r\n}"]},"metadata":{},"sourceType":"module"}