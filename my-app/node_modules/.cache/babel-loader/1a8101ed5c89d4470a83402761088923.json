{"ast":null,"code":"function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction checkRow(grid, row, value) {\n  for (let col = 0; col < 9; col++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkCol(grid, col, value) {\n  for (let row = 0; row < 9; row++) {\n    if (grid[row][col] === value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkSquare(grid, row, col, value) {\n  let squareRow = Math.floor(row / 3) * 3;\n  let squareCol = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[squareRow + i][squareCol + j] === value) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkValue(grid, row, col, value) {\n  if (checkRow(grid, row, value) && checkCol(grid, col, value) && checkSquare(grid, row, col, value)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default function loadRGrid() {\n  let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (Math.random() > 0.9) {\n        grid[row][col] = getRandomInt(8) + 1;\n        let check = checkValue(grid, row, col, grid[row][col]);\n\n        while (!check) {\n          // console.log(grid[row][col])\n          grid[row][col] = getRandomInt(8) + 1;\n          check = checkValue(grid, row, col, grid[row][col]);\n        }\n      }\n    }\n  }\n\n  return grid;\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/loadRGrid.js"],"names":["getRandomInt","max","Math","floor","random","checkRow","grid","row","value","col","checkCol","checkSquare","squareRow","squareCol","i","j","checkValue","loadRGrid","check"],"mappings":"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","sourcesContent":["function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\nfunction checkRow(grid, row, value) {\r\n    for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkCol(grid, col, value) {\r\n    for (let row = 0; row < 9; row++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkSquare(grid, row, col,value) {\r\n    let squareRow = Math.floor(row/3)*3\r\n    let squareCol = Math.floor(col/3)*3\r\n\r\n    for (let i = 0; i<3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (grid[squareRow + i][squareCol + j] === value)\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkValue(grid, row, col, value) {\r\n    if (checkRow(grid, row, value) &&\r\n        checkCol(grid, col,value) &&\r\n        checkSquare(grid, row,col,value)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\nexport default function loadRGrid() {\r\n    let grid = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    for (let row=0; row < 9; row ++) {\r\n        for (let col=0; col< 9; col++) {\r\n          if (Math.random() > 0.9) {\r\n            grid[row][col] = getRandomInt(8)+1\r\n\r\n            let check = checkValue(grid,row,col,grid[row][col])\r\n            while(!check) {\r\n                // console.log(grid[row][col])\r\n                grid[row][col] = getRandomInt(8)+1\r\n                check = checkValue(grid,row,col,grid[row][col])\r\n            }\r\n          }\r\n\r\n        }\r\n    }\r\n\r\n    return grid\r\n}"]},"metadata":{},"sourceType":"module"}