{"ast":null,"code":"function Node(row, col) {\n  return document.getElementById(`node-${row}-${col}`);\n} // Gets a node from the screen\n\n\nfunction pushToScreen(grid) {\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      Node(row, col).value = grid[row][col];\n    }\n  }\n}\n\nfunction showErrors() {\n  let seen = [];\n  let squareRow = 0;\n  let squareCol = 0; //check the rows\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (seen.includes(NodeVal(row, col))) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(NodeVal(row, col));\n      }\n    }\n\n    seen = [];\n  } //check the columns\n\n\n  for (let col = 0; col < 9; col++) {\n    for (let row = 0; row < 9; row++) {\n      if (seen.includes(NodeVal(row, col))) {\n        Node(row, col).className = 'node-finish';\n      } else {\n        seen.push(NodeVal(row, col));\n      }\n    }\n\n    seen = [];\n  } //Check the squares\n\n\n  for (let square = 0; square < 9; square++) {\n    for (let row = squareRow; row < 3 + squareRow; row++) {\n      for (let col = squareCol; col < 3 + squareCol; col++) {\n        if (seen.includes(NodeVal(row, col))) {\n          Node(row, col).className = 'node-finish';\n        } else {\n          seen.push(NodeVal(row, col));\n        }\n      }\n    }\n\n    if (squareCol !== 6) {\n      squareCol = squareCol + 3;\n    } else {\n      squareCol = 0;\n      squareRow = squareRow + 3;\n    }\n\n    seen = [];\n  }\n}\n\nexport default function visualizeGeneticAlgorithm(moves) {\n  // console.log(moves)\n  //Show all the moves\n  for (let i = 0; i < moves.length; i++) {\n    // console.log(moves[i])\n    setTimeout(() => {\n      pushToScreen(moves[i]);\n    }, 1000 * Math.log(i));\n  }\n\n  setTimeout(() => {\n    showErrors();\n  }, 1000 * Math.log(moves.length));\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/algorithms/visualizeGeneticAlgorithm.js"],"names":["Node","row","col","document","getElementById","pushToScreen","grid","value","showErrors","seen","squareRow","squareCol","includes","NodeVal","className","push","square","visualizeGeneticAlgorithm","moves","i","length","setTimeout","Math","log"],"mappings":"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","sourcesContent":["function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction pushToScreen(grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n}\r\n\r\nfunction showErrors() {\r\n    let seen = []\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //Check the squares\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (seen.includes(NodeVal(row,col))) {\r\n                    Node(row,col).className = 'node-finish'\r\n                }\r\n                else {\r\n                    seen.push(NodeVal(row,col))\r\n                }\r\n            }\r\n        }\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n\r\n        seen = []\r\n    }\r\n}\r\n\r\nexport default function visualizeGeneticAlgorithm(moves) {\r\n    // console.log(moves)\r\n    //Show all the moves\r\n    for (let i = 0; i < moves.length; i++) {\r\n        // console.log(moves[i])\r\n        setTimeout(() => {\r\n            pushToScreen(moves[i])\r\n        }, 1000*Math.log(i))\r\n        \r\n    }\r\n    setTimeout(() => {\r\n        showErrors()\r\n    }, 1000*Math.log(moves.length))\r\n}"]},"metadata":{},"sourceType":"module"}