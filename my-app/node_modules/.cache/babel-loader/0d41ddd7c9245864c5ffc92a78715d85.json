{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Sudoku\\\\my-app\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this);\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 9; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        const currentNode = {\n          col,\n          row,\n          value: 0,\n          isStart: row === 0 && col === 0,\n          isFinish: row === 8 && col === 8\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  visualizeAlgorithm(name) {\n    console.print(name);\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Please select an algorithm\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAlgorithm(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          isStart,\n          isFinish,\n          value\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          isStart: isStart,\n          isFinish: isFinish,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/Sudoku/my-app/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","visualizeAlgorithm","bind","componentDidMount","row","currentRow","col","currentNode","value","isStart","isFinish","push","setState","name","console","print","render","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,6BAAP;AAEA,eAAe,MAAMC,qBAAN,SAAoCF,SAApC,CAA8C;AAC3DG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMH,KAAK,GAAG,EAAd;;AACA,SAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC,cAAMC,WAAW,GAAG;AAClBD,UAAAA,GADkB;AAElBF,UAAAA,GAFkB;AAGlBI,UAAAA,KAAK,EAAE,CAHW;AAIlBC,UAAAA,OAAO,EAAEL,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,CAJZ;AAKlBI,UAAAA,QAAQ,EAAEN,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK;AALb,SAApB;AAOAD,QAAAA,UAAU,CAACM,IAAX,CAAgBJ,WAAhB;AACD;;AACDP,MAAAA,KAAK,CAACW,IAAN,CAAWN,UAAX;AACD;;AACD,SAAKO,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AACD;;AAEDC,EAAAA,kBAAkB,CAACY,IAAD,EAAO;AACvBC,IAAAA,OAAO,CAACC,KAAR,CAAcF,IAAd;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,wBACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,CADA,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKE,kBAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAJF,eAOE;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACiB,GAAN,CAAU,CAACb,GAAD,EAAMc,MAAN,KAAiB;AAC1B,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGd,GAAG,CAACa,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AAC1B,cAAM;AAAEX,UAAAA,OAAF;AAAWC,UAAAA,QAAX;AAAqBF,UAAAA;AAArB,YAA+BW,IAArC;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAIC,OADT;AAEE,UAAA,OAAO,EAAIX,OAFb;AAGE,UAAA,QAAQ,EAAEC,QAHZ;AAIE,UAAA,KAAK,EAAEF,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,OAVA,CADH,CADF;AAeD,KAhBA,CADH,CAPF,CADF;AA4BD;;AA9D0D","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n    };\r\n    this.visualizeAlgorithm = this.visualizeAlgorithm.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 9; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          value: 0,\r\n          isStart: row === 0 && col === 0,\r\n          isFinish: row === 8 && col === 8,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.setState({ nodes });\r\n  }\r\n\r\n  visualizeAlgorithm(name) {\r\n    console.print(name)\r\n  }\r\n\r\n  render() {\r\n    const { nodes } = this.state;\r\n    return (\r\n      <>\r\n      <select>\r\n        <option value=\"1\">Please select an algorithm</option>\r\n      </select>\r\n        <button onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <div className = 'grid'>\r\n          {nodes.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { isStart, isFinish, value } = node;\r\n                  return (\r\n                    <Node \r\n                      key = {nodeIdx}\r\n                      isStart = {isStart}\r\n                      isFinish={isFinish}\r\n                      value={value}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}